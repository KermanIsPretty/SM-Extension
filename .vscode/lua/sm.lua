--##
--Autogenerated by Kerman
dofile("bit.lua")

SurvivalGame = false

---fix for stupid unknown
---@class class
class = {}

---@class sm
sm = {}

---@class physics
sm.physics = {}

---@class terrainData
sm.terrainData = {}

---@class json
sm.json = {}

---@class noise
sm.noise = {}

---@class util
sm.util = {}

---@class projectile
sm.projectile = {}

---@class melee
sm.melee = {}

---@class game
sm.game = {}

---@class creation
sm.creation = {}

---@class cell
sm.cell = {}

---@class network
sm.network = {}

---@class storage
sm.storage = {}

---@class event
sm.event = {}

---@class log
sm.log = {}

---@class debugDraw
sm.debugDraw = {}

---@class ai
sm.ai = {}

---@class item
sm.item = {}

---@class challenge
sm.challenge = {}

---@class construction
sm.construction = {}

---@class menuCreation
sm.menuCreation = {}

---@class shape
sm.shape = {}

---@class body
sm.body = {}

---@class interactable
sm.interactable = {}

---@class joint
sm.joint = {}

---@class container
sm.container = {}

---@class quest
sm.quest = {}

---@class harvestable
sm.harvestable = {}

---@class character
sm.character = {}

---@class player
sm.player = {}

---@class unit
sm.unit = {}

---@class aiState
sm.aiState = {}

---@class areaTrigger
sm.areaTrigger = {}

---@class portal
sm.portal = {}

---@class lift
sm.lift = {}

---@class vec3
sm.vec3 = { x = 0, y = 0, z = 0 }

---@class quat
sm.quat = {}

---@class uuid
sm.uuid = {}

---@class color
sm.color = {}

---@class raycastResult
sm.raycastResult = {}

---@class pathNode
sm.pathNode = {}

---@class pathfinder
sm.pathfinder = {}

---@class gui
sm.gui = {}

---@class widget
sm.gui.widget = {}

---@class guiInterface
sm.gui.interface = {}

---@class particle
sm.particle = {}

---@class effect
sm.effect = {}

---@class audio
sm.audio = {}

---@class localPlayer
sm.localPlayer = {}

---@class camera
sm.camera = {}

---@class render
sm.render = {}

---@class tool
sm.tool = {}

---@class visualization
sm.visualization = {}

---@class terrainTile
sm.terrainTile = {}

---@class terrainGeneration
sm.terrainGeneration = {}

---@class world
sm.world = { id = 0 }

---Extra values
sm.isHost = false
sm.version = "unknown"

---see if a object exists
---@param object any
---@return boolean exists
function sm.exists( object )
    return true
end

---very straight forward
---@return boolean
function sm.isServerMode()
    return false
end

---Unknown Function?
---@param unknown network
---@param unknown2 string
---@param unknown3 table | string | number
function sm.network:sendToServer( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown network
---@param unknown2 unknown
---@param unknown3 string
---@param unknown4 table | string | number
function sm.network:sendToClient( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown network
---@param unknown2 string
---@param unknown3 table | string | number
function sm.network:sendToClients( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown network
---@param unknown2 table | string | number
function sm.network:setClientData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.network:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.network:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown storage
---@param unknown2 table | string | number
function sm.storage:save( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown storage
function sm.storage:load( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.storage:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.storage:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getId( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getShapeUuid( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getColor( unknown )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 color
function sm.shape:setColor( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getMass( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getBuoyancy( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getMaterial( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getWorldPosition( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getLocalPosition( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getXAxis( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getYAxis( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getZAxis( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getAt( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getRight( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getUp( unknown )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 vec3
function sm.shape:transformPoint( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 vec3
function sm.shape:transformLocalPoint( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 quat
function sm.shape:transformRotation( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getBoundingBox( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getBody( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getInteractable( unknown )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 integer
function sm.shape:destroyPart( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getWorldRotation( unknown )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 uuid
---@param unknown3 vec3
---@param unknown4 vec3
function sm.shape:createJoint( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getMaterialId( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape:getIsHarvest( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape:getIsStackable( unknown )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 integer
function sm.shape:destroyShape( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 vec3
---@param unknown3 vec3
---@param unknown4 integer
function sm.shape:destroyBlock( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 vec3
function sm.shape:getClosestBlockLocalPosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:shapeExists( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.shape:shapesInSphere( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getNeighbours( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape:getPipedNeighbours( unknown )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 uuid
function sm.shape:replaceShape( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.shape:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.shape:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 shape
function sm.shape:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getId( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getCreationId( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getMass( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getWorldPosition( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getAngularVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getShapes( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getCreationShapes( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getCreationBodies( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 uuid
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 vec3
---@param unknown6 number
function sm.body:createPart( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 uuid | integer
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 number
function sm.body:createBlock( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 integer
function sm.body:hasChanged( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isDynamic( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isStatic( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isOnLift( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isDestructable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setDestructable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isBuildable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setBuildable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isPaintable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setPaintable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isConnectable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setConnectable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isLiftable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setLiftable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isUsable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setUsable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isErasable( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setErasable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:isConvertibleToDynamic( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body:setConvertibleToDynamic( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getAllSeatedCharacter( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getCenterOfMassPosition( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getWorld( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getLocalAabb( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body:getWorldAabb( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 vec3
function sm.body:transformPoint( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.body:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.body:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 body
function sm.body:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getId( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getType( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getColorNormal( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getColorHighlight( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getMaxParentCount( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getMaxChildCount( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:isActive( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 number
function sm.interactable:setActive( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getPower( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 number | string
function sm.interactable:setPower( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getPublicData( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 table
function sm.interactable:setPublicData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:hasOutputType( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getShape( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getConnectionInputType( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getConnectionOutputType( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getBody( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getSingleParent( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:getParents( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:getChildren( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getJoints( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getBearings( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getPistons( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:getPoseWeight( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
---@param unknown3 number | string
function sm.interactable:setPoseWeight( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getGlowMultiplier( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 number | string
function sm.interactable:setGlowMultiplier( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getUvFrameIndex( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:setUvFrameIndex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
function sm.interactable:hasAnim( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
---@param unknown3 number | string
function sm.interactable:setAnimProgress( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
---@param unknown3 number
function sm.interactable:setAnimEnabled( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
function sm.interactable:getAnimDuration( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
function sm.interactable:getLocalBonePosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
function sm.interactable:getWorldBonePosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:getContainer( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 interactable
function sm.interactable:connect( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 interactable
function sm.interactable:disconnect( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:connectToJoint( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
function sm.interactable:addContainer( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:removeContainer( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 table | string | number
function sm.interactable:setParams( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:hasSeat( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 character
function sm.interactable:setSeatCharacter( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getSeatCharacter( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getSeatInteractables( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:pressSeatInteractable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:releaseSeatInteractable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:hasSteering( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:setSteeringFlag( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable:unsetSteeringFlag( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getSteeringPower( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable:getSteeringAngle( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:getSteeringJointLeftAngleSpeed( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:getSteeringJointRightAngleSpeed( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:getSteeringJointLeftAngleLimit( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:getSteeringJointRightAngleLimit( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:getSteeringJointUnlocked( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
function sm.interactable:getSteeringJointSettings( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
---@param unknown3 number | string
function sm.interactable:setSteeringJointLeftAngleSpeed( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
---@param unknown3 number | string
function sm.interactable:setSteeringJointRightAngleSpeed( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
---@param unknown3 number | string
function sm.interactable:setSteeringJointLeftAngleLimit( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
---@param unknown3 number | string
function sm.interactable:setSteeringJointRightAngleLimit( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
---@param unknown3 number
function sm.interactable:setSteeringJointUnlocked( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 joint
---@param unknown3 number | string
---@param unknown4 number | string
---@param unknown5 number | string
---@param unknown6 number | string
---@param unknown7 number
function sm.interactable:setSteeringJointSettings( unknown, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
---@param unknown3 number
function sm.interactable:setSubMeshVisible( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.interactable:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.interactable:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 interactable
function sm.interactable:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown joint
---@param unknown2 uuid
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 vec3
---@param unknown6 number
function sm.joint:createPart( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown joint
---@param unknown2 uuid
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 number
function sm.joint:createBlock( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown joint
function sm.joint:getId( unknown )
    return
end

---Unknown Function?
---@param unknown joint
function sm.joint:getType( unknown )
    return
end

---Unknown Function?
---@param unknown joint
function sm.joint:getShapeA( unknown )
    return
end

---Unknown Function?
---@param unknown joint
function sm.joint:getShapeB( unknown )
    return
end

---Unknown Function?
---@param unknown joint
function sm.joint:getColor( unknown )
    return
end

---Unknown Function?
---@param unknown bearing | joint
function sm.joint:getAngle( unknown )
    return
end

---Unknown Function?
---@param unknown bearing | joint
function sm.joint:getAngularVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown bearing | joint
function sm.joint:getAppliedImpulse( unknown )
    return
end

---Unknown Function?
---@param unknown bearing | joint
function sm.joint:isReversed( unknown )
    return
end

---Unknown Function?
---@param unknown bearing | joint
---@param unknown2 number | string
---@param unknown3 number | string
function sm.joint:setMotorVelocity( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown bearing | joint
---@param unknown2 number | string
---@param unknown3 number | string
---@param unknown4 number | string
function sm.joint:setTargetAngle( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown piston | joint
function sm.joint:getLength( unknown )
    return
end

---Unknown Function?
---@param unknown piston | joint
---@param unknown2 number | string
---@param unknown3 number | string
---@param unknown4 number | string
function sm.joint:setTargetLength( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.joint:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.joint:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown joint
---@param unknown2 joint
function sm.joint:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
function sm.container:getSize( unknown )
    return
end

---Unknown Function?
---@param unknown container
function sm.container:getMaxStackSize( unknown )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 integer
---@param unknown3 uuid
---@param unknown4 integer
---@param unknown5 integer
function sm.container:setItem( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 integer
function sm.container:getItem( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 integer
function sm.container:hasChanged( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
function sm.container:isEmpty( unknown )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 number
function sm.container:setAllowCollect( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
function sm.container:getAllowCollect( unknown )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 number
function sm.container:setAllowSpend( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
function sm.container:getAllowSpend( unknown )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
---@param unknown3 integer
function sm.container:canCollect( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
---@param unknown3 integer
function sm.container:canSpend( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 table
function sm.container:setFilters( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.container:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.container:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 container
function sm.container:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest:getUuid( unknown )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest:getObjectives( unknown )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest:getRewards( unknown )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest:getDescription( unknown )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest:remove( unknown )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest:complete( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.quest:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.quest:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown quest
---@param unknown2 quest
function sm.quest:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getId( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getType( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getName( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getMaterial( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getMaterialId( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:destroy( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getPosition( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 vec3
function sm.harvestable:setPosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getRotation( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 quat
function sm.harvestable:setRotation( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 integer
function sm.harvestable:getPoseWeight( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 integer
---@param unknown3 number | string
function sm.harvestable:setPoseWeight( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getColor( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 color
function sm.harvestable:setColor( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getUvFrameIndex( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 integer
function sm.harvestable:setUvFrameIndex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table | string | number
function sm.harvestable:setParams( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getUuid( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table | string | number
function sm.harvestable:getAabb( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getData( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getPublicData( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table
function sm.harvestable:setPublicData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable:getClientPublicData( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table
function sm.harvestable:setClientPublicData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.harvestable:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.harvestable:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 harvestable
function sm.harvestable:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getId( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getWorldPosition( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getDirection( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getMass( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getHeight( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getPlayer( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getUnit( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getWorld( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isPlayer( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getRadius( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isDefaultColor( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 color
function sm.character:setColor( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getColor( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getGlowMultiplier( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number | string
function sm.character:setGlowMultiplier( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
---@param unknown3 number | string
---@param unknown4 string
function sm.character:bindAnimationCallback( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:removeAnimationCallbacks( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
function sm.character:addRenderable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
function sm.character:removeRenderable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
function sm.character:getAnimationInfo( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
---@param unknown3 number | string
---@param unknown4 number | string
---@param unknown5 number
function sm.character:updateAnimation( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number | string
---@param unknown3 number | string
function sm.character:setMovementWeights( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number
function sm.character:setAllowTumbleAnimations( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number
function sm.character:setDowned( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isDowned( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number
function sm.character:setSwimming( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isSwimming( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number
function sm.character:setDiving( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isDiving( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number
function sm.character:setTumbling( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isTumbling( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 vec3
function sm.character:applyTumblingImpulse( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getTumblingWorldPosition( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getTumblingWorldRotation( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getTumblingExtent( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getTumblingLinearVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getCanSwim( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getActiveAnimations( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
function sm.character:getTpBonePos( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
function sm.character:getTpBoneRot( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
function sm.character:setMovementEffects( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 number | string
function sm.character:setMovementSpeedFraction( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getMovementSpeedFraction( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 interactable
function sm.character:setLockingInteractable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getLockingInteractable( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getCurrentMovementNoiseRadius( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isSprinting( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isAiming( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isCrouching( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getCurrentMovementSpeed( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:isOnGround( unknown )
    return
end

---Unknown Function?
---@param unknown character
function sm.character:getCharacterType( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.character:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.character:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 character
function sm.character:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown player
function sm.player:getId( unknown )
    return
end

---Unknown Function?
function sm.player:getCharacter()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 character
function sm.player:setCharacter( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.player:getName()
    return
end

---Unknown Function?
function sm.player:getInventory()
    return
end

---Unknown Function?
function sm.player:getHotbar()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 table
---@param unknown3 vec3
---@param unknown4 integer
---@param unknown5 integer
function sm.player:placeLift( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
function sm.player:removeLift()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.player:sendCharacterEvent( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.player:isMale()
    return
end

---Unknown Function?
function sm.player:getCarryColor()
    return
end

---Unknown Function?
function sm.player:getCarry()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.player:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.player:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown player
---@param unknown2 player
function sm.player:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.unit:destroy()
    return
end

---Unknown Function?
---@param unknown unit
function sm.unit:getId( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 integer
---@param unknown3 number | string
---@param unknown4 number | string
---@param unknown5 number | string
function sm.unit:setWhiskerData( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 number | string
function sm.unit:setHearingData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.unit:createState( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 vec3
function sm.unit:setMovementDirection( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 vec3
function sm.unit:setFacingDirection( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.unit:setMovementType( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 number
function sm.unit:setWantsJump( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.unit:getCurrentMovementDirection()
    return
end

---Unknown Function?
function sm.unit:getCurrentFacingDirection()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.unit:sendCharacterEvent( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.unit:getCharacter()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.unit:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.unit:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unit
---@param unknown2 unit
function sm.unit:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:start( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:stop( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
---@param unknown2 number | string
function sm.aiState:onFixedUpdate( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown aiState
---@param unknown2 number | string
function sm.aiState:onUnitUpdate( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:isDone( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:getMovementDirection( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:getFacingDirection( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:getMovementType( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
function sm.aiState:getWantsJump( unknown )
    return
end

---Unknown Function?
---@param unknown aiState
---@param unknown2 string
function sm.aiState:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown aiState
---@param unknown2 string
function sm.aiState:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown aiState
---@param unknown2 aiState
function sm.aiState:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.aiState:__gc()
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getId( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 string
function sm.areaTrigger:bindOnEnter( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 string
function sm.areaTrigger:bindOnExit( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 string
function sm.areaTrigger:bindOnStay( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 string
function sm.areaTrigger:bindOnProjectile( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getContents( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getWorldMin( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getWorldMax( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getWorldPosition( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 vec3
function sm.areaTrigger:setWorldPosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 vec3
function sm.areaTrigger:setSize( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getSize( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getHostInteractable( unknown )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:getUserData( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.areaTrigger:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.areaTrigger:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
---@param unknown2 areaTrigger
function sm.areaTrigger:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown areaTrigger
function sm.areaTrigger:__gc( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getId( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:hasOpeningA( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:hasOpeningB( unknown )
    return
end

---Unknown Function?
---@param unknown portal
---@param unknown2 vec3
---@param unknown3 quat
function sm.portal:setOpeningA( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown portal
---@param unknown2 vec3
---@param unknown3 quat
function sm.portal:setOpeningB( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getPositionA( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getPositionB( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getRotationA( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getRotationB( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getWorldA( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getWorldB( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getContentsA( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:getContentsB( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:transferAToB( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal:transferBToA( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.portal:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.portal:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown portal
---@param unknown2 portal
function sm.portal:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown lift
function sm.lift:getId( unknown )
    return
end

---Unknown Function?
function sm.lift:getWorldPosition()
    return
end

---Unknown Function?
function sm.lift:getLevel()
    return
end

---Unknown Function?
function sm.lift:hasBodies()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.lift:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.lift:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown lift
---@param unknown2 lift
function sm.lift:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
function sm.vec3:normalize( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:dot( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:cross( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
function sm.vec3:length( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
function sm.vec3:length2( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.vec3:rotateX( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.vec3:rotateY( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.vec3:rotateZ( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
---@param unknown3 vec3
function sm.vec3:rotate( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.vec3:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.vec3:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:__unm( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:__add( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:__sub( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3 | number | string
function sm.vec3:__div( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3 | number | string
function sm.vec3:__mul( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:__lt( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
function sm.vec3:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown vec3
function sm.vec3:__tostring( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.quat:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.quat:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown quat
---@param unknown2 quat | vec3
function sm.quat:__mul( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown quat
---@param unknown2 quat
function sm.quat:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.uuid:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.uuid:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.uuid:__tostring( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
---@param unknown2 uuid
function sm.uuid:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
function sm.color:getHexStr( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.color:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.color:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
---@param unknown2 color
function sm.color:__add( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
---@param unknown2 color
function sm.color:__sub( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
---@param unknown2 color | number | string
function sm.color:__div( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
---@param unknown2 color | number | string
function sm.color:__mul( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
---@param unknown2 color
function sm.color:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown color
function sm.color:__tostring( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getBody( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getShape( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getCharacter( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getJoint( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getLiftData( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getHarvestable( unknown )
    return
end

---Unknown Function?
---@param unknown raycastResult
function sm.raycastResult:getAreaTrigger( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.raycastResult:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.raycastResult:__index( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.pathNode:destroy()
    return
end

---Unknown Function?
---@param unknown pathNode
---@param unknown2 unknown
---@param unknown3 table
---@param unknown4 table
---@param unknown5 number | string
function sm.pathNode:connect( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
function sm.pathNode:getPosition()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.pathNode:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.pathNode:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown pathNode
---@param unknown2 pathNode
function sm.pathNode:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.gui.widget:find()
    return
end

---Unknown Function?
function sm.gui.widget:getName()
    return
end

---Unknown Function?
function sm.gui.widget:getTypeName()
    return
end

---Unknown Function?
function sm.gui.widget:getPosition()
    return
end

---Unknown Function?
function sm.gui.widget:setPosition()
    return
end

---Unknown Function?
function sm.gui.widget:getVisible()
    return
end

---Unknown Function?
function sm.gui.widget:setVisible()
    return
end

---Unknown Function?
function sm.gui.widget:getSize()
    return
end

---Unknown Function?
function sm.gui.widget:setSize()
    return
end

---Unknown Function?
function sm.gui.widget:getText()
    return
end

---Unknown Function?
function sm.gui.widget:setText()
    return
end

---Unknown Function?
function sm.gui.widget:bindOnClick()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.gui.widget:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.gui.widget:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown widget
---@param unknown2 widget
function sm.gui.widget:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
function sm.gui.interface:destroy( unknown )
    return
end

---Unknown Function?
---@param unknown guiInterface
function sm.gui.interface:open( unknown )
    return
end

---Unknown Function?
---@param unknown guiInterface
function sm.gui.interface:close( unknown )
    return
end

---Unknown Function?
---@param unknown guiInterface
function sm.gui.interface:isActive( unknown )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setText( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 number
function sm.gui.interface:setVisible( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 color
function sm.gui.interface:setColor( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setImage( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
---@param unknown4 string
---@param unknown5 string
function sm.gui.interface:setItemIcon( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 uuid
function sm.gui.interface:setIconImage( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 number
function sm.gui.interface:setButtonState( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 integer
function sm.gui.interface:setSliderRange( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 integer
function sm.gui.interface:setSliderPosition( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 integer
function sm.gui.interface:setSliderRangeLimit( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 integer
---@param unknown4 integer
function sm.gui.interface:setSliderData( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
function sm.gui.interface:clearList( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
---@param unknown4 number | string
function sm.gui.interface:addListItem( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setSelectedListItem( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
function sm.gui.interface:clearGrid( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
---@param unknown4 number | string
function sm.gui.interface:addGridItemsFromFile( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 number | string
function sm.gui.interface:addGridItem( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 integer
---@param unknown4 number | string
function sm.gui.interface:setGridItem( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 integer
function sm.gui.interface:setGridSize( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 container
function sm.gui.interface:setContainer( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 table
function sm.gui.interface:setContainers( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 number | string
function sm.gui.interface:setData( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 character | shape
---@param unknown3 string
function sm.gui.interface:setHost( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 vec3
---@param unknown3 world
function sm.gui.interface:setWorldPosition( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 number | string
function sm.gui.interface:setMaxRenderDistance( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 number | string
function sm.gui.interface:setFadeRange( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 number
function sm.gui.interface:setRequireLineOfSight( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
function sm.gui.interface:setOnCloseCallback( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setButtonCallback( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setSliderCallback( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setGridButtonCallback( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setGridItemChangedCallback( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 string
---@param unknown3 string
function sm.gui.interface:setListSelectionCallback( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.gui.interface:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.gui.interface:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
---@param unknown2 guiInterface
function sm.gui.interface:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown guiInterface
function sm.gui.interface:__gc( unknown )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:getId( unknown )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:start( unknown )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:stop( unknown )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:stopImmediate( unknown )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:destroy( unknown )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:isPlaying( unknown )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 vec3
function sm.effect:setPosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 vec3
function sm.effect:setScale( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 vec3
function sm.effect:setVelocity( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 quat
function sm.effect:setRotation( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 vec3
function sm.effect:setOffsetPosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 quat
function sm.effect:setOffsetRotation( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 string
---@param unknown3 number | string | vec3 | quat | color | uuid
function sm.effect:setParameter( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.effect:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.effect:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
---@param unknown2 effect
function sm.effect:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown effect
function sm.effect:__gc( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getId( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getOwner( unknown )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
---@param unknown3 number | string
---@param unknown4 number | string
function sm.tool:updateAnimation( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
---@param unknown3 string
function sm.tool:setMovementAnimation( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number | string
---@param unknown3 number | string
function sm.tool:updateMovementAnimation( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
function sm.tool:getAnimationInfo( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
---@param unknown3 vec3
---@param unknown4 number | string
function sm.tool:updateJoint( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number | string
---@param unknown3 number | string
---@param unknown4 vec3
---@param unknown5 number | string
function sm.tool:updateCamera( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:setTpRenderables( unknown )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 color
function sm.tool:setTpColor( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
---@param unknown3 number | string
---@param unknown4 number | string
---@param unknown5 number
function sm.tool:updateFpAnimation( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
function sm.tool:getFpAnimationInfo( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 table
function sm.tool:setFpRenderables( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 color
function sm.tool:setFpColor( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number | string
---@param unknown3 vec3
---@param unknown4 number | string
---@param unknown5 number | string
function sm.tool:updateFpCamera( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:isCrouching( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:isSprinting( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:isOnGround( unknown )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number
function sm.tool:setBlockSprint( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number
function sm.tool:setMovementSlowDown( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:isLocal( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:isInFirstPersonView( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:isEquipped( unknown )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number | string
function sm.tool:setDispersionFraction( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number | string
function sm.tool:setCrossHairAlpha( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 number
function sm.tool:setInteractionTextSuppressed( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getPosition( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getDirection( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getMovementVelocity( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getRelativeMoveDirection( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getMovementSpeedFraction( unknown )
    return
end

---Unknown Function?
---@param unknown tool
function sm.tool:getCameraWeights( unknown )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
function sm.tool:getTpBonePos( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
function sm.tool:getTpBoneDir( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown tool
---@param unknown2 string
function sm.tool:getFpBonePos( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.tool:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.tool:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown blueprint
---@param unknown2 vec3
function sm.visualization:setPosition( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown blueprint
function sm.visualization:destroy( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.visualization:__newindex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 string
function sm.visualization:__index( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown blueprint
---@param unknown2 blueprint
function sm.visualization:__eq( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.visualization:__gc()
    return
end

---Performs a [ray cast](https://en.wikipedia.org/wiki/Ray_casting) between two positions.
---The returned [`raycastResult`](#userdata.raycastresult "userdata.raycastresult") contains information about any object intersected by the ray.
---If the ray cast is called from within a shape (e.g. a Sensor), a [`body`](#userdata.body "userdata.body") may be provided which the ray will not intersect.
---@param startPos vec3 The start position.
---@param endPos vec3 The end position.
---@param body shape | character | harvestable | body The body to be ignored. (Optional)
---@param unknown integer
---@return boolean|raycastResult value 2 values: whether raycast was successful; the raycast result data.
function sm.physics.raycast( startPos, endPos, body, unknown )
    return
end

---Performs a distance [ray cast](https://en.wikipedia.org/wiki/Ray_casting) from a position with a given direction.
---Note
---[`sm.physics.distanceRaycast`](#sm.physics.distanceraycast "sm.physics.distanceraycast") is generally cheaper to use than [`sm.physics.raycast`](#sm.physics.raycast "sm.physics.raycast") as it performs collision checks in a simplified world. If the raycast is only used for checking collision, it is adviced to use this method instead.
---@param start vec3 The start position.
---@param direction vec3 The ray's direction and length.
---@return boolean|number value 2 values: whether raycast was successful; the fraction (0–1) of the distance reached until collision divided by the ray's length.
function sm.physics.distanceRaycast( start, direction )
    return
end

---(Server Function) Applies an impulse to a [`character`](#userdata.character "userdata.character"), changing its velocity immediately. The impulse is applied to the character's centerpoint.
---@param target userdata | body | character | shape The character on which the impulse is exerted on.
---@param impulse vec3 The direction and strength of the impulse.
---@param unknown number
---@param unknown2 vec3
function sm.physics.applyImpulse( target, impulse, unknown, unknown2 )
    return
end

---(Server Function) Applies a torque impulse to a [`body`](#userdata.body "userdata.body"), changing its angular velocity immediately. The torque is applied along the body's center of mass, making it rotate.
---@param target userdata | body The object on which the torque is exerted on.
---@param torque vec3 The direction and strength of the torque.
---@param global number Whether the torque is applied in global coordinates. (Defaults to local rotation)
function sm.physics.applyTorque( target, torque, global )
    return
end

---(Server Function) Creates an explosion at given position. The explosion creates a shockwave that is capable of destroying blocks and pushing characters and creations away.
---Shapes that are within the explosion's destruction radius may receive the event [`server_onExplosion`](#shapeclass.server_onexplosion "shapeclass.server_onexplosion").
---Note
---The **destruction level** is the damage effect on blocks and parts, determining how likely it is that they are destroyed. This is related to the `qualityLevel` found in parts json-files.
---Any quality level equal to or less than the destruction level may be destroyed. The effect fades one level every half travelled of the remaining destruction radius.
---A quality level of 0 means a block or part is indestructible.
---@param position vec3 The center point of the explosion.
---@param level integer The destruction level affecting nearby objects.
---@param destructionRadius number | string The destruction radius. Objects inside this sphere may be destroyed.
---@param impulseRadius number | string The impulse radius. Objects inside this sphere are affected by an impulse.
---@param magnitude number | string The impulse strength of the explosion. The strength diminishes with distance.
---@param effectName string The name of the effect to be played upon explosion. (Optional)
---@param ignoreShape shape The shape to be ignored. (Optional)
---@param unknown table
function sm.physics.explode( position, level, destructionRadius, impulseRadius, magnitude, effectName, ignoreShape, unknown )
    return
end

---(Server Function) Sets the gravitational acceleration affecting [`shapes`](#userdata.shape "userdata.shape") and [`bodies`](#userdata.body "userdata.body").
---@param gravity number | string The gravitational value.
function sm.physics.setGravity( gravity )
    return
end

---(Server Function) Returns the gravitational acceleration affecting [`shapes`](#userdata.shape "userdata.shape") and [`bodies`](#userdata.body "userdata.body").
---@return number value The gravitational value.
function sm.physics.getGravity()
    return
end

---Unknown Function?
---@param unknown vec3
function sm.physics.getGroundMaterial( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
---@param unknown3 number
---@param unknown4 number
function sm.physics.sphereContactCount( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.physics.getSphereContacts( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown table | string | number
function sm.terrainData.save( unknown )
    return
end

---Unknown Function?
function sm.terrainData.load()
    return
end

---Unknown Function?
function sm.terrainData.exists()
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 table | string | number
function sm.terrainData.legacy_saveTerrainData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown integer
function sm.terrainData.legacy_loadTerrainData( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.terrainData.legacy_setData( unknown )
    return
end

---Unknown Function?
function sm.terrainData.legacy_getData()
    return
end

---Unknown Function?
---@param unknown string
function sm.json.open( unknown )
    return
end

---Unknown Function?
---@param unknown number | string
---@param unknown2 string
function sm.json.save( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown string
function sm.json.parseJsonString( unknown )
    return
end

---Unknown Function?
---@param unknown number | string
function sm.json.writeJsonString( unknown )
    return
end

---A simplex noise 1d function.
---@param x number | string The X value.
---@return number value The noise value.
function sm.noise.simplexNoise1d( x )
    return
end

---A simplex noise 2d function.
---@param x number | string The X value.
---@param y number | string The Y value.
---@return number value The noise value.
function sm.noise.simplexNoise2d( x, y )
    return
end

---An integer noise 2d function.
---@param x number The X value.
---@param y number The Y value.
---@param octaves integer The octaves.
---@param seed integer The seed.
---@return integer value The noise value.
function sm.noise.intNoise2d( x, y, octaves, seed )
    return
end

---A float noise 2d function.
---@param x number | string The X value.
---@param y number | string The Y value.
---@param seed integer The seed.
---@return number value The noise value.
function sm.noise.floatNoise2d( x, y, seed )
    return
end

---Unknown Function?
---@param unknown number | string
---@param unknown2 number | string
---@param unknown3 integer
function sm.noise.perlinNoise2d( unknown, unknown2, unknown3 )
    return
end

---An octave noise 2d function.
---@param x number | string The X value.
---@param y number | string The Y value.
---@param octaves integer The octaves.
---@param seed integer The seed.
---@return number value The noise value.
function sm.noise.octaveNoise2d( x, y, octaves, seed )
    return
end

---Returns a random number N such that `a <= N <= b`.
---@param a number | string The lower bound.
---@param b number | string The upper bound.
---@return number value The random value.
function sm.noise.randomRange( a, b )
    return
end

---Returns a random number according to the [normal random number distribution](https://en.wikipedia.org/wiki/Normal_distribution).
---Values near the **mean** are the most likely.
---Standard **deviation** affects the dispersion of generated values from the mean.
---@param mean number | string The mean.
---@param deviation number | string The deviation.
---@return number value The random number.
function sm.noise.randomNormalDistribution( mean, deviation )
    return
end

---Returns a directional vector with a random spread given by a [`normal distribution`](#sm.noise.randomnormaldistribution "sm.noise.randomnormaldistribution").
---@param direction vec3 The direction.
---@param spreadAngle number | string The spread angle in degrees.
---@return vec3 value The spread direction.
function sm.noise.gunSpread( direction, spreadAngle )
    return
end

---Restricts a value to a given range.
---@param x number | string The value.
---@param lower number | string The lower limit.
---@param upper number | string The upper limit.
---@return number value The clamped value.
function sm.util.clamp( x, lower, upper )
    return
end

---Linear interpolation between two values. This is known as a lerp.
---@param x0 number | string The first value.
---@param x1 number | string The second value.
---@param t number | string The interpolation step.
---@return number value The interpolated value between two values.
function sm.util.lerp( x0, x1, t )
    return
end

---Quadratic Bezier interpolation. One dimensional bezier curve.
---@param c0 number | string The start value.
---@param c1 number | string The control point.
---@param c2 number | string The end value.
---@param t number | string The interpolation step.
---@return number value The interpolated value between two values.
function sm.util.bezier2( c0, c1, c2, t )
    return
end

---Cubic Bezier interpolation. One dimensional bezier curve.
---@param c0 number | string The start value.
---@param c1 number | string The first control point.
---@param c2 number | string The second control point.
---@param c3 number | string The end value.
---@param t number | string The interpolation step.
---@return number value The interpolated value between two values.
function sm.util.bezier3( c0, c1, c2, c3, t )
    return
end

---Returns the positive remainder after division of x by n.
---@param x number The number.
---@param n number The modulo value.
---@return number value The value.
function sm.util.positiveModulo( x, n )
    return
end

---Performs smooth Hermite interpolation between 0 and 1 when `edge0 < x < edge1`. This is useful in cases where a threshold function with a smooth transition is desired.
---@param edge0 number | string The value of the lower edge of the Hermite function.
---@param edge1 number | string The value of the upper edge of the Hermite function.
---@param x number | string The source value for interpolation.
---@return number value The value.
function sm.util.smoothstep( edge0, edge1, x )
    return
end

---An improved version of the [`smoothstep`](#sm.util.smoothstep "sm.util.smoothstep") function which has zero 1st and 2nd order derivatives at `x = edge0` and `x = edge1`.
---@param edge0 number | string The value of the lower edge of the Hermite function.
---@param edge1 number | string The value of the upper edge of the Hermite function.
---@param x number | string The source value for interpolation.
---@return number value The value.
function sm.util.smootherstep( edge0, edge1, x )
    return
end

---Returns the mass of a projectile.
---@param name string The projectile's name.
---@return number value The mass.
function sm.projectile.getProjectileMass( name )
    return
end

---(Client Function) Creates and fires a projectile from a player.
---The projectile is normally fired from the player's position, but due to the weapon being held off-center it may require a fake position for where the projectile appears to be fired from.
---@param name string The projectile's name.
---@param position vec3 The start position.
---@param velocity vec3 The direction and velocity.
---@param fakePosThird vec3 The visual start position in third-person. (Defaults to position)
---@param fakePosFirst vec3 The visual start position in first-person. (Defaults to position)
---@param delay integer The number of ticks before firing. (Defaults to 0)
function sm.projectile.playerFire( name, position, velocity, fakePosThird, fakePosFirst, delay )
    return
end

---(Server Function) Creates and fires a projectile from a [`shape`](#userdata.shape "userdata.shape").
---@param shape shape The shape.
---@param name string The projectile's name.
---@param position vec3 The start position.
---@param velocity vec3 The direction and velocity.
---@param delay integer The number of ticks before firing. (Defaults to 0)
function sm.projectile.shapeFire( shape, name, position, velocity, delay )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
---@param unknown3 number | string
---@param unknown4 number | string
function sm.projectile.solveBallisticArc( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 integer
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 unknown
---@param unknown6 vec3
---@param unknown7 vec3
---@param unknown8 integer
function sm.projectile.projectileAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7, unknown8 )
    return
end

---Unknown Function?
---@param unknown table | string | number
---@param unknown2 string
---@param unknown3 integer
---@param unknown4 vec3
---@param unknown5 vec3
---@param unknown6 unknown
---@param unknown7 vec3
---@param unknown8 vec3
---@param unknown9 integer
function sm.projectile.customProjectileAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7, unknown8, unknown9 )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 integer
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 shape
---@param unknown6 integer
function sm.projectile.shapeProjectileAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown table | string | number
---@param unknown2 string
---@param unknown3 integer
---@param unknown4 vec3
---@param unknown5 vec3
---@param unknown6 shape
---@param unknown7 integer
function sm.projectile.shapeCustomProjectileAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7 )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 integer
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 harvestable
---@param unknown6 integer
function sm.projectile.harvestableProjectileAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown table | string | number
---@param unknown2 string
---@param unknown3 integer
---@param unknown4 vec3
---@param unknown5 vec3
---@param unknown6 harvestable
---@param unknown7 integer
function sm.projectile.harvestableCustomProjectileAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7 )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 integer
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 unknown
---@param unknown6 integer
---@param unknown7 number | string
function sm.melee.meleeAttack( unknown, unknown2, unknown3, unknown4, unknown5, unknown6, unknown7 )
    return
end

---Unknown Function?
function sm.game.getServerTick()
    return
end

---Return the current game tick
---@return number value The tick.
function sm.game.getCurrentTick()
    return
end

---Unknown Function?
---@param unknown number
function sm.game.setLimitedInventory( unknown )
    return
end

---Unknown Function?
function sm.game.getLimitedInventory()
    return
end

---Unknown Function?
---@param unknown number
function sm.game.setEnableRestrictions( unknown )
    return
end

---Unknown Function?
function sm.game.getEnableRestrictions()
    return
end

---Unknown Function?
---@param unknown number
function sm.game.setEnableAmmoConsumption( unknown )
    return
end

---Unknown Function?
function sm.game.getEnableAmmoConsumption()
    return
end

---Unknown Function?
---@param unknown number
function sm.game.setEnableFuelConsumption( unknown )
    return
end

---Unknown Function?
function sm.game.getEnableFuelConsumption()
    return
end

---Unknown Function?
---@param unknown number
function sm.game.setEnableUpgradeCost( unknown )
    return
end

---Unknown Function?
function sm.game.getEnableUpgradeCost()
    return
end

---Unknown Function?
---@param unknown number
function sm.game.setEnableAggro( unknown )
    return
end

---Unknown Function?
function sm.game.getEnableAggro()
    return
end

---Bind a chat command
---@param name string
---@param arguments table
---@param callback string
---@param defention string
function sm.game.bindChatCommand( name, arguments, callback, defention )
    return
end

---Set the time of day using a number between 0.0 and 1.0
---@param time number | string
function sm.game.setTimeOfDay( time )
    return
end

---Returns a number through 1.0 and 0.0
function sm.game.getTimeOfDay()
    return
end

---The diffucuilty between 1 and 2, 2 = normal, 1 = easy
function sm.game.getDifficulty()
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
---@param unknown3 number
function sm.creation.exportToString( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown world
---@param unknown2 string
---@param unknown3 vec3
---@param unknown4 quat
---@param unknown5 number
function sm.creation.importFromString( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown world
---@param unknown2 string
---@param unknown3 vec3
---@param unknown4 quat
---@param unknown5 number
---@param unknown6 number
function sm.creation.importFromFile( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 string
function sm.cell.getNodesByTag( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 table
function sm.cell.getNodesByTags( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 string
function sm.cell.getInteractablesByTag( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 table
function sm.cell.getInteractablesByTags( unknown, unknown2, unknown3 )
    return
end

---(Server Function) Returns all [`interactables`](#sm.interactable "sm.interactable") of a given type for a cell coordinate.
---@param x integer The X-coordinate
---@param y integer The Y-coordinate
---@param uuid uuid The uuid of the interactable(s)
---@return interactable value A table of found interactables with matching uuid
function sm.cell.getInteractablesByUuid( x, y, uuid )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 table
function sm.cell.getInteractablesByAnyUuid( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
function sm.cell.getHarvestables( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
function sm.cell.getTags( unknown, unknown2 )
    return
end

---(Server Function) Saves any Lua data at a given channel. A _channel_ can be any integer, and acts as the location the data will be stored at.
---The data will remain stored after closing the world, and is retrieved using [`load`](#sm.storage.load "sm.storage.load"), provided the same channel number.
---Note
---The data is stored globally **within the current mod**. As of such, channels will not collide with external mods and scripts.
---@param channel table | string | number The channel number.
---@param data table | string | number The data to be stored.
function sm.storage.save( channel, data )
    return
end

---(Server Function) Loads Lua data stored at a given channel. A _channel_ can be any integer, and acts as the location the data is stored at.
---If no data is stored at the given channel, this returns nil.
---@param channel table | string | number The channel number.
---@return  value The data stored.
function sm.storage.load( channel )
    return
end

---(Server Function) Sends a event from a world script to the game script.
---@param callbackMethod string The function name in the game script.
---@param args table | string | number Optional arguments to be sent to the game script.
function sm.event.sendToGame( callbackMethod, args )
    return
end

---(Server Function) Sends a event from the game script to a specified world script.
---@param world world The world.
---@param callbackMethod string The function name in a world script.
---@param args table | string | number Optional arguments to be sent to the world script.
function sm.event.sendToWorld( world, callbackMethod, args )
    return
end

---(Server Function) Send a event to a unit?
---@param unit unit
---@param event string
---@param params table | string | number
function sm.event.sendToUnit( unknown, event, params )
    return
end

---(Server Function) Send a event to a player
---@param player player
---@param event string
---@param params table | string | number
function sm.event.sendToPlayer( player, event, params )
    return
end

---(Server Function) Send a event to a character
---@param character character
---@param event string
---@param params table | string | number
function sm.event.sendToCharacter( character, event, params )
    return
end

---(Server Function) Send a event to a harvestabe
---@param harvestable harvestable
---@param event string
---@param params table | string | number
function sm.event.sendToHarvestable( harvestable, event, params )
    return
end

---(Server Function) Send a event to a interactable
---@param interactable interactable
---@param event string
---@param params table | string | number
function sm.event.sendToInteractable( interactable, event, params )
    return
end

---Log info to SM
---@param log string
function sm.log.info( log )
    return
end

---Log a warning to SM
---@param log string
function sm.log.warning( log )
    return
end

---Log a error to SM
---@param log string
function sm.log.error( log )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 vec3
---@param unknown3 vec3
---@param unknown4 color
function sm.debugDraw.addArrow( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown string
function sm.debugDraw.removeArrow( unknown )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 vec3
---@param unknown3 number | string
---@param unknown4 color
function sm.debugDraw.addSphere( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown string
function sm.debugDraw.removeSphere( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.debugDraw.clear( unknown )
    return
end

---Unknown Function?
function sm.ai.getClosestVisiblePlayerCharacter()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 uuid
function sm.ai.getClosestVisibleCharacterType( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 color
function sm.ai.getClosestVisibleTeamOpponent( unknown, unknown2 )
    return
end

---Unknown Function?
function sm.ai.getClosestVisibleCrop()
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 vec3
function sm.ai.isReachable( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown body
function sm.ai.getRandomCreationPosition( unknown )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 vec3
---@param unknown3 number | string
function sm.ai.directPathAvailable( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown unknown
---@param unknown2 vec3
---@param unknown3 number | string
---@param unknown4 integer
function sm.ai.getBreachablePosition( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 unknown
---@param unknown3 number | string
---@param unknown4 number | string
function sm.ai.getAimPosition( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown string
function sm.item.myFunction( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getShapeOffset( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getQualityLevel( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getPlantable( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getEdible( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getCharacterShape( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.isTool( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.isBlock( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.isPart( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.isJoint( unknown )
    return
end

---Unknown Function?
function sm.item.getPlantableUuids()
    return
end

---Unknown Function?
---@param unknown string
function sm.item.getInteractablesUuidsOfType( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getShapeSize( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.item.getShapeDefaultColor( unknown )
    return
end

---(Server Function) Starts challenge.
function sm.challenge.start()
    return
end

---(Server Function) Stops challenge.
function sm.challenge.stop()
    return
end

---(Server Function) Check if a challenge has started
---@return boolean value Return true if the challenge has started.
function sm.challenge.hasStarted()
    return
end

---(Server Function) Completes a challenge level and saves progression.
---@param level integer The level's index.
---@param time number | string The completion time.
---@param unknown table | string | number
function sm.challenge.levelCompleted( level, time, unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.challenge.getCompletionTime( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.challenge.getSaveData( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.challenge.resolveContentPath( unknown )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
function sm.challenge.takePicture( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
function sm.challenge.takePicturesForMenu( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
---@param unknown2 vec3
---@param unknown3 lift | joint | shape
function sm.construction.buildBlock( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown uuid
---@param unknown2 vec3
---@param unknown3 vec3
---@param unknown4 joint | shape
function sm.construction.validateLocalPosition( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
function sm.menuCreation.load()
    return
end

---Unknown Function?
---@param unknown number | string
function sm.menuCreation.save( unknown )
    return
end

---Returns the id of a shape.
---@param shape shape The shape.
---@return integer value The shape's id.
function sm.shape.getId( shape )
    return
end

---Returns the uuid string unique to a shape/block type.
---@param shape shape The shape.
---@return uuid value The shape's uuid.
function sm.shape.getShapeUuid( shape )
    return
end

---Returns the color of a shape.
---@param shape shape The shape.
---@return color value The shape's color.
function sm.shape.getColor( shape )
    return
end

---(Server Function) Sets the color of a shape. This is similar to coloring with the _Paint Tool_.
---@param shape body The shape.
---@param color color The color.
function sm.shape.setColor( shape, color )
    return
end

---Returns the mass of a shape.
---@param shape shape The shape.
---@return number value The shape's mass.
function sm.shape.getMass( shape )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape.getBuoyancy( unknown )
    return
end

---Returns the material of a shape.
---@param shape shape The shape.
---@return string value The shape's material.
function sm.shape.getMaterial( shape )
    return
end

---Returns the world position of a shape.
---@param shape shape The shape.
---@return vec3 value The shape's world position.
function sm.shape.getWorldPosition( shape )
    return
end

---Returns the local grid postition of a shape.
---@param shape shape The shape.
---@return vec3 value The shape's local position.
function sm.shape.getLocalPosition( shape )
    return
end

---Returns the linear velocity of a shape.
---@param shape shape The shape.
---@return vec3 value The shape's linear velocity.
function sm.shape.getVelocity( shape )
    return
end

---Returns the local x-axis vector of a shape.
---@param shape shape The shape.
---@return vec3 value The shape's x-axis.
function sm.shape.getXAxis( shape )
    return
end

---Returns the local y-axis vector of a shape.
---@param shape shape The shape.
---@return vec3 value The shape's y-axis.
function sm.shape.getYAxis( shape )
    return
end

---Returns the local z-axis vector of a shape.
---@param shape shape The shape.
---@return vec3 value The shape's z-axis.
function sm.shape.getZAxis( shape )
    return
end

---Returns the direction of a shape's front side.
---The direction is affected by the shape's rotation in the world.
---@param shape shape The shape.
---@return vec3 value The shape's at-axis.
function sm.shape.getAt( shape )
    return
end

---Returns the direction of a shape's right side.
---The direction is affected by the shape's rotation in the world.
---@param shape shape The shape.
---@return vec3 value The shape's right-axis.
function sm.shape.getRight( shape )
    return
end

---Returns the direction of a shape's top side.
---The direction is affected by the shape's rotation in the world.
---@param shape shape The shape.
---@return vec3 value The shape's up-axis.
function sm.shape.getUp( shape )
    return
end

---Transform a [`vec3`](#userdata.vec3 "userdata.vec3") with the local shape transform.
---local localPos \= self.shape:transformPoint( worldPos )
---@param shape shape The shape.
---@param vector vec3 The untransformed vector.
---@return vec3 value The transformed vector.
function sm.shape.transformPoint( shape, vector )
    return
end

---Unknown Function?
---@param unknown shape
---@param unknown2 vec3
function sm.shape.transformLocalPoint( unknown, unknown2 )
    return
end

---Transform a [`quat`](#userdata.quat "userdata.quat") with the local shape transform.
---local worldUp \= sm.vec3.new( 0, 0, 1 )
---local worldRot \= sm.vec3.getRotation( worldUp, worldDir )
---local localRot \= self.shape:transformRotation( worldRot )
---@param shape shape The shape.
---@param quat quat The untransformed quaternion.
---@return quat value The transformed quaternion.
function sm.shape.transformRotation( shape, quat )
    return
end

---Returns the bounding box of a shape – the dimensions that a shape occupies when building.
---@param shape shape The shape.
---@return vec3 value The size of the shape's bounding box.
function sm.shape.getBoundingBox( shape )
    return
end

---Returns the [`body`](#userdata.body "userdata.body") a shape is part of.
---@param shape shape The shape.
---@return body value The body which the shape is part of.
function sm.shape.getBody( shape )
    return
end

---Returns the [`interactable`](#userdata.interactable "userdata.interactable") of a shape, if one exists. Otherwise the function will return nil.
---@param shape shape The shape.
---@return interactable value The interactable belonging to the shape.
function sm.shape.getInteractable( shape )
    return
end

---(Server Function) Destroy a part
---@param cs shape The part.
---@param attackLevel integer Determines which quality level of parts the attack can destroy. Setting it to 0 (default) will destroy any part.
function sm.shape.destroyPart( cs, attackLevel )
    return
end

---Returns the world rotation of a shape.
---@param shape shape The shape.
---@return quat value The shape's world rotation.
function sm.shape.getWorldRotation( shape )
    return
end

---(Server Function) Create a new part
---@param uuid uuid The uuid of the shape.
---@param position vec3 The shape's world position.
---@param rotation quat The shape's world rotation.
---@param dynamic boolean Set true if the shape is dynamic or false if the shape is static.
---@param forceSpawn boolean Set true to force spawn the shape even if it will cause collision.
function sm.shape.createPart( uuid, position, rotation, dynamic, forceSpawn )
    return
end

---(Server Function) Create a new block
---@param uuid uuid The uuid of the shape.
---@param size vec3 The size of the block.
---@param position vec3 The shape's world position.
---@param rotation quat The shape's world rotation.
---@param dynamic boolean Set true if the shape is dynamic or false if the shape is static.
---@param forceSpawn boolean Set true to force spawn the shape even if it will cause collision.
function sm.shape.createBlock( uuid, size, position, rotation, dynamic, forceSpawn )
    return
end

---(Server Function) Create a new joint
---@param shape shape The host shape.
---@param uuid uuid The uuid of the joint.
---@param position vec3 The joint's grid position.
---@param direction vec3 The joint's normal direction.
function sm.shape.createJoint( shape, uuid, position, direction )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.uuidExists( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape.getMaterialId( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.getIsHarvest( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.getIsStackable( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.getShapeTypeColor( unknown )
    return
end

---(Server Function) Destroy a shape
---@param shape shape The shape.
---@param attackLevel integer Determines which quality level of shape the attack can destroy. Setting it to 0 (default) will destroy any shape.
function sm.shape.destroyShape( shape, attackLevel )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.getShapeTitle( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.getShapeDescription( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.shape.getShapeIcon( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape.shapeExists( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.shape.shapesInSphere( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape.getNeighbours( unknown )
    return
end

---Unknown Function?
---@param unknown shape
function sm.shape.getPipedNeighbours( unknown )
    return
end

---Returns the id of a body.
---@param body body The body.
---@return integer value The body's id.
function sm.body.getId( body )
    return
end

---Unknown Function?
---@param unknown body
function sm.body.getCreationId( unknown )
    return
end

---Returns the mass of a body.
---@param body body The body.
---@return number value The body's mass.
function sm.body.getMass( body )
    return
end

---Returns the world position of a body.
---@param body body The body.
---@return vec3 value The body's world position.
function sm.body.getWorldPosition( body )
    return
end

---Returns the linear velocity of a body.
---@param body body The body.
---@return vec3 value The body's linear velocity.
function sm.body.getVelocity( body )
    return
end

---Returns the angular velocity of a body.
---@param body body The body.
---@return vec3 value The body's angular velocity.
function sm.body.getAngularVelocity( body )
    return
end

---Returns a table of all [`shapes`](#userdata.shape "userdata.shape") that are part of a body.
---This will **not** return shapes in neighbouring bodies connected by [`joints`](#userdata.joint "userdata.joint"), etc.
---@param body body The body.
---@return shape value The table of shapes in a body.
function sm.body.getShapes( body )
    return
end

---Returns a table of all [`shapes`](#userdata.shape "userdata.shape") that are part of a creation.
---A creation includes all bodies connected by [`joints`](#userdata.joint "userdata.joint"), etc.
---@param body body The body.
---@return shape value The table of shapes in a creation.
function sm.body.getCreationShapes( body )
    return
end

---Returns a table of all bodies in a creation.
---A creation includes all bodies connected by [`joints`](#userdata.joint "userdata.joint"), etc.
---@param body body The body.
---@return body value The table all bodies in a creation.
function sm.body.getCreationBodies( body )
    return
end

---Returns a table of tables, which is an array of tables containing bodies grouped by creation.
---A creation includes all bodies connected by [`joints`](#userdata.joint "userdata.joint"), etc.
---@param unknown table
---@return body|unknown value The table array containing tables of all the bodies, grouped by creation.
function sm.body.getCreationsFromBodies( unknown )
    return
end

---(Server Function) Returns true if the given tick is lower than the tick the body was last changed.
---@param body body The body.
---@param tick unsigned The tick.
---@return boolean value Returns true if the body has been changed.
function sm.body.hasChanged( body, tick )
    return
end

---(Server Function) Returns a table with all the bodies in the world.
---@return body value The table of all bodies.
function sm.body.getAllBodies()
    return
end

---Unknown Function?
---@param unknown vec3 | body
---@param unknown2 quat | uuid
---@param unknown3 vec3 | number
---@param unknown4 vec3
---@param unknown5 vec3
---@param unknown6 number
function sm.body.createBody( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown body
function sm.body.getWorldRotation( unknown )
    return
end

---Unknown Function?
---@param unknown body
function sm.body.getCenterOfMassPosition( unknown )
    return
end

---Check if a body is dyanmic
---@param body body The body.
---@return boolean value Return true if the body is dynamic.
function sm.body.isDynamic( body )
    return
end

---Check if a body is static
---@param body body The body.
---@return boolean value Return true if the body is static.
function sm.body.isStatic( body )
    return
end

---Unknown Function?
---@param unknown body
function sm.body.isOnLift( unknown )
    return
end

---Check if a body is destructable.
---@param body body The body.
---@return boolean value Return true if the body is destructable.
function sm.body.isDestructable( body )
    return
end

---(Server Function) Controls whether a body is destructable
---@param body body The body.
---@param value boolean Whether the body is destructable.
function sm.body.setDestructable( body, value )
    return
end

---Check if a body is buildable
---@param body body The body.
---@return boolean value Return true if the body is buildable.
function sm.body.isBuildable( body )
    return
end

---(Server Function) Controls whether a body is buildable
---@param body body The body.
---@param value boolean Whether the body is buildable.
function sm.body.setBuildable( body, value )
    return
end

---Check if a body is paintable
---@param body body The body.
---@return boolean value Return true if the body is paintable.
function sm.body.isPaintable( body )
    return
end

---(Server Function) Controls whether a body is non paintable
---@param body body The body.
---@param value boolean Whether the body is paintable.
function sm.body.setPaintable( body, value )
    return
end

---Check if a body is connectable
---@param body body The body.
---@return boolean value Return true if the body is connectable.
function sm.body.isConnectable( body )
    return
end

---(Server Function) Controls whether a body is connectable
---@param body body The body.
---@param value boolean Whether the body is connectable.
function sm.body.setConnectable( body, value )
    return
end

---Check if a body is liftable
---@param body body The body.
---@return boolean value Return true if the body is liftable.
function sm.body.isLiftable( body )
    return
end

---(Server Function) Controls whether a body is liftable
---@param body body The body.
---@param value boolean Whether the body is liftable.
function sm.body.setLiftable( body, value )
    return
end

---Check if a body is interactable
---@param body body The body.
---@return boolean value Return true if the body is interactable.
function sm.body.isUsable( body )
    return
end

---(Server Function) Controls whether a body is liftable
---@param body body The body.
---@param value boolean Whether the body is interactable.
function sm.body.setUsable( body, value )
    return
end

---Check if a body is erasable.
---@param body body The body.
---@return boolean value Return true if the body is erasable.
function sm.body.isErasable( body )
    return
end

---(Server Function) Controls whether a body is erasable
---@param body body The body.
---@param value boolean Whether the body is erasable.
function sm.body.setErasable( body, value )
    return
end

---Unknown Function?
---@param unknown body
function sm.body.isConvertibleToDynamic( unknown )
    return
end

---Unknown Function?
---@param unknown body
---@param unknown2 number
function sm.body.setConvertibleToDynamic( unknown, unknown2 )
    return
end

---Returns the id of an interactable.
---@param interactable interactable The interactable.
---@return integer value The interactable's id.
function sm.interactable.getId( interactable )
    return
end

---Returns the interactable type of an interactable.
---@param interactable interactable The interactable.
---@return string value The interactable's type. (sm.interactable.types)
function sm.interactable.getType( interactable )
    return
end

---Returns the connection-point color of an interactable. The point is shown when using the _Connect Tool_.
---@param interactable interactable The interactable.
---@return color value The connection-point color.
function sm.interactable.getColorNormal( interactable )
    return
end

---Returns the connection-point highlight color of an interactable. The point is shown when using the _Connect Tool_.
---@param interactable interactable The interactable.
---@return color value The connection-point highlight color.
function sm.interactable.getColorHighlight( interactable )
    return
end

---Returns the maximum number of allowed parent connections of an interactable – the number of incoming connections.
---@param interactable interactable The interactable.
---@return integer value The max parent connection count.
function sm.interactable.getMaxParentCount( interactable )
    return
end

---Returns the maximum number of allowed child connections of an interactable – the number of outgoing connections.
---@param interactable interactable The interactable.
---@return integer value The max child connection count.
function sm.interactable.getMaxChildCount( interactable )
    return
end

---Returns the logic output signal of an interactable. Signal is a boolean, **on** or **off**.
---@param interactable interactable The interactable.
---@return boolean value The logic output signal.
function sm.interactable.isActive( interactable )
    return
end

---(Server Function) Sets the logic output signal of an interactable. Signal is a boolean, **on** or **off**.
---@param interactable interactable The interactable.
---@param signal boolean The logic output signal.
function sm.interactable.setActive( interactable, signal )
    return
end

---Returns the power output signal of an interactable. Signal is a number between -1 to 1, where 1 is forward and -1 backward.
---@param interactable interactable The interactable.
---@return number value The power output signal.
function sm.interactable.getPower( interactable )
    return
end

---(Server Function) Sets the power output signal of an interactable. Signal is a number between -1 to 1, where 1 is forward and -1 backward.
---@param interactable interactable The interactable.
---@param signal number | string The power output signal.
function sm.interactable.setPower( interactable, signal )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable.getPublicData( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 table
function sm.interactable.setPublicData( unknown, unknown2 )
    return
end

---Returns the [`shape`](#userdata.shape "userdata.shape") of an interactable.
---@param interactable interactable The interactable.
---@return shape value The shape which hosts the interactable.
function sm.interactable.getShape( interactable )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable.getConnectionInputType( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable.getConnectionOutputType( unknown )
    return
end

---Returns the [`body`](#userdata.body "userdata.body") an interactable's [`shape`](#userdata.shape "userdata.shape") is part of.
---@param interactable interactable The interactable.
---@return body value The body an interactable's shape is part of.
function sm.interactable.getBody( interactable )
    return
end

---Returns the parent [`interactable`](#userdata.interactable "userdata.interactable") that is connected to an interactable. The parent act as the interactable's input.
---Warning
---This method is **not** allowed for an interactable that allows more than one parent connection. See [`sm.interactable.getMaxParentCount`](#sm.interactable.getmaxparentcount "sm.interactable.getmaxparentcount").
---@param interactable interactable The interactable.
---@return interactable value The connected parent interactable.
function sm.interactable.getSingleParent( interactable )
    return
end

---Returns a table of parent [`interactables`](#userdata.interactable "userdata.interactable") that are connected to an interactable. The parents act as the interactable's input.
---@param interactable interactable The interactable.
---@param unknown integer
---@return interactable value A table of the connected parent interactables.
function sm.interactable.getParents( interactable, unknown )
    return
end

---Returns a table of child [`interactables`](#userdata.interactable "userdata.interactable") that an interactable is connected to. The children listen to the interactable's output.
---@param interactable interactable The interactable.
---@param unknown integer
---@return interactable value A table of the connected child interactables.
function sm.interactable.getChildren( interactable, unknown )
    return
end

---Returns a table of all [`joints`](#userdata.joint "userdata.joint") that an interactable is connected to. Joints include **bearings** and **pistons**.
---@param interactable interactable The interactable.
---@return joint value A table of the connected joints.
function sm.interactable.getJoints( interactable )
    return
end

---Returns a table of [`bearings`](#userdata.joint "userdata.joint") that an interactable is connected to.
---@param interactable interactable The interactable.
---@return joint value A table of the connected bearings.
function sm.interactable.getBearings( interactable )
    return
end

---Returns a table of [`pistons`](#userdata.joint "userdata.joint") that an interactable is connected to.
---@param interactable interactable The interactable.
---@return joint value A table of the connected pistons.
function sm.interactable.getPistons( interactable )
    return
end

---(Client Function) Returns the pose weight of the pose in the given index.
---@param interactable interactable The interactable.
---@param index integer The index.
---@return number value The pose weight.
function sm.interactable.getPoseWeight( interactable, index )
    return
end

---(Client Function) Set the pose weight of the pose in the given index.
---@param interactable interactable The interactable.
---@param index integer The index.
---@param value number | string The pose weight.
function sm.interactable.setPoseWeight( interactable, index, value )
    return
end

---Unknown Function?
---@param unknown interactable
function sm.interactable.getGlowMultiplier( unknown )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 number | string
function sm.interactable.setGlowMultiplier( unknown, unknown2 )
    return
end

---(Client Function) Returns the index of the current UV animation frame
---@param interactable interactable The interactable.
---@return integer value The uv frame.
function sm.interactable.getUvFrameIndex( interactable )
    return
end

---(Client Function) Sets the UV animation frame with the given index.
---@param interactable interactable The interactable.
---@param index integer The index.
function sm.interactable.setUvFrameIndex( interactable, index )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
function sm.interactable.hasAnim( unknown, unknown2 )
    return
end

---(Client Function) Sets the progress on the animation with the given name.
---@param interactable interactable The interactable.
---@param name string The name of the animation.
---@param progress number | string The animation's progress between 0 and 1.
function sm.interactable.setAnimProgress( interactable, name, progress )
    return
end

---(Client Function) Sets whether the animation with the given name should be applied to the mesh. True enables the animation and false disables it.
---@param interactable interactable The interactable.
---@param name string The name of the animation.
---@param enabled boolean The boolean enable state.
function sm.interactable.setAnimEnabled( interactable, name, enabled )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 string
function sm.interactable.getAnimDuration( unknown, unknown2 )
    return
end

---Return the position of the bone
---@param interactable interactable The interactable.
---@param name string The bone name.
---@return vec3 value The position.
function sm.interactable.getLocalBonePosition( interactable, name )
    return
end

---Return the position of the bone
---@param interactable interactable The interactable.
---@param name string The bone name.
---@return vec3 value The position.
function sm.interactable.getWorldBonePosition( interactable, name )
    return
end

---Returns the container stored in the given index inside the controller
---@param interactable interactable The interactable.
---@param index integer The index of the container (default: 0).
---@return container value The container.
function sm.interactable.getContainer( interactable, index )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 interactable
function sm.interactable.connect( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 interactable
function sm.interactable.disconnect( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
function sm.interactable.addContainer( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 integer
function sm.interactable.removeContainer( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown interactable
---@param unknown2 table | string | number
function sm.interactable.setParams( unknown, unknown2 )
    return
end

---(Server Function) Create a part on joint
---@param joint joint The parent joint.
---@param uuid uuid The uuid of the shape.
---@param position vec3 The shape's local position.
---@param z_axis vec3 The shape's local z direction.
---@param x_axis vec3 The shape's local x direction.
---@param forceCreate boolean Set true to force create the shape.
function sm.joint.createPart( joint, uuid, position, z_axis, x_axis, forceCreate )
    return
end

---(Server Function) Create a block on joint
---@param joint joint The parent joint.
---@param uuid uuid The uuid of the shape.
---@param size vec3 The shape's size.
---@param position vec3 The shape's local position.
---@param forceCreate boolean Set true to force create the shape.
function sm.joint.createBlock( joint, uuid, size, position, forceCreate )
    return
end

---Returns the id of a joint.
---@param joint joint The joint.
---@return integer value The joint's id.
function sm.joint.getId( joint )
    return
end

---Returns the joint type of a joint.
---@param joint joint The joint.
---@return string value The joint's type. (sm.joint.types)
function sm.joint.getType( joint )
    return
end

---Returns the [`shape`](#userdata.shape "userdata.shape") a joint is attached to. This shape does always exist.
---@param joint joint The joint.
---@return shape value The joint's first shape.
function sm.joint.getShapeA( joint )
    return
end

---Returns the [`shape`](#userdata.shape "userdata.shape") that is attached to a joint on another [`body`](#userdata.body "userdata.body"). This method returns nil if there is no shape attached to the joint.
---@param joint joint The joint.
---@return shape value The joint's second shape.
function sm.joint.getShapeB( joint )
    return
end

---Returns the color of a joint.
---@param joint joint The joint.
---@return color value The joint's color.
function sm.joint.getColor( joint )
    return
end

---Returns the angle of a bearing.
---@param bearing bearing | joint The bearing.
---@return number value The bearing's angle. The angle ranges between -math.pi and +math.pi.
function sm.joint.getAngle( bearing )
    return
end

---Returns the angular velocity of a bearing.
---The angular velocity can be set using [`setMotorVelocity`](#sm.joint.setmotorvelocity "sm.joint.setmotorvelocity") or [`setTargetAngle`](#sm.joint.settargetangle "sm.joint.settargetangle").
---@param bearing bearing | joint The bearing.
---@return number value The bearing's angular velocity.
function sm.joint.getAngularVelocity( bearing )
    return
end

---Returns the applied impulse of a bearing.
---The applied impulse can be set using [`setMotorVelocity`](#sm.joint.setmotorvelocity "sm.joint.setmotorvelocity") or [`setTargetAngle`](#sm.joint.settargetangle "sm.joint.settargetangle").
---@param bearing bearing | joint The bearing.
---@return number value The bearing's applied impulse.
function sm.joint.getAppliedImpulse( bearing )
    return
end

---Returns whether a bearing has been reversed using the _Connect Tool_. A reversed bearing rotates counterclockwise.
---@param bearing bearing | joint The bearing.
---@return boolean value Whether the bearing is reversed (rotating counterclockwise).
function sm.joint.isReversed( bearing )
    return
end

---(Server Function) Sets the motor velocity for a bearing. The bearing will try to maintain the target velocity with the given amount of impulse/strength.
---In Scrap Mechanic, the Gas Engine increases both velocity and impulse with every gear. The Electic Engine increases velocity, but maintains the same impulse for every gear, making it sturdier.
---This method cancels the effects of [`setTargetAngle`](#sm.joint.settargetangle "sm.joint.settargetangle").
---@param bearing bearing | joint The bearing.
---@param targetVelocity number | string The target velocity.
---@param maxImpulse number | string The max impulse.
function sm.joint.setMotorVelocity( bearing, targetVelocity, maxImpulse )
    return
end

---(Server Function) Sets the target angle for a bearing. The bearing will try to reach the target angle with the target velocity and the given amount of impulse/strength.
---The target angle is set to range between `-math.pi` and `+math.pi`. The bearing will always try to rotate in the direction closest to the target angle.
---This method cancels the effects of [`setMotorVelocity`](#sm.joint.setmotorvelocity "sm.joint.setmotorvelocity").
---@param bearing bearing | joint The bearing.
---@param targetAngle number | string The target angle.
---@param targetVelocity number | string The target velocity.
---@param maxImpulse number | string The max impulse.
function sm.joint.setTargetAngle( bearing, targetAngle, targetVelocity, maxImpulse )
    return
end

---Returns the current length of a piston. The length is measured in blocks.
---@param piston piston | joint The piston.
---@return number value The piston's current length in blocks.
function sm.joint.getLength( piston )
    return
end

---(Server Function) Sets the target length for a piston. The piston will try to reach the target length with the target velocity and the given amount of impulse/strength.
---The target length is measured in blocks.
---This method cancels the effects of [`setMotorVelocity`](#sm.joint.setmotorvelocity "sm.joint.setmotorvelocity").
---@param bearing piston | joint The bearing.
---@param targetLength number | string The target length.
---@param targetVelocity number | string The target velocity.
---@param maxImpulse number | string The max impulse. (Defaults to impulse used in game)
function sm.joint.setTargetLength( bearing, targetLength, targetVelocity, maxImpulse )
    return
end

---(Server Function) Starts a new _transaction_ shared across all containers. A transaction is a collection of all changes of container items will be collected and processed
---A transaction must be ended with [`sm.container.endTransaction`](#sm.container.endtransaction "sm.container.endtransaction").
---@return boolean value Whether starting a transaction was successful.
function sm.container.beginTransaction()
    return
end

---(Server Function) Ends a transaction.
---@return boolean value Whether ending a transaction was successful.
function sm.container.endTransaction()
    return
end

---(Server Function) Aborts a transaction.
function sm.container.abortTransaction()
    return
end

---Returns the number of slots in a container.
---@param container container The container.
---@return integer value The size.
function sm.container.getSize( container )
    return
end

---Unknown Function?
---@param unknown container
function sm.container.getMaxStackSize( unknown )
    return
end

---(Server Function) Sets the number of items stacked in a given container slot.
---@param container container The container.
---@param slot integer The slot.
---@param itemUuid uuid The uuid of the item.
---@param quantity integer The number of items.
---@param unknown integer
---@return boolean value Indicates if the action is possible.
function sm.container.setItem( container, slot, itemUuid, quantity, unknown )
    return
end

---(Server Function) Returns a table containing item uuid, quantity (and instance id for tools) at given slot.
---@param container container The container.
---@param slot integer The slot.
---@return uuid|integer (integer) value The table.
function sm.container.getItem( container, slot )
    return
end

---Unknown Function?
---@param unknown container
function sm.container.getFirstItem( unknown )
    return
end

---(Server Function) Returns true if the given tick is lower than the tick the container was last changed.
---@param container container The container.
---@param tick unsigned The tick.
---@return boolean value Returns true if the container has been changed.
function sm.container.hasChanged( container, tick )
    return
end

---(Server Function) Returns true if the container is empty.
---@param container container The container.
---@return boolean value Returns true if the container is empty.
function sm.container.isEmpty( container )
    return
end

---Unknown Function?
---@param unknown container
function sm.container.getId( unknown )
    return
end

---Unknown Function?
---@param unknown container
function sm.container.quantity( unknown )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
function sm.container.totalQuantity( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
function sm.container.itemUuid( unknown )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 integer
---@param unknown3 container
---@param unknown4 integer
function sm.container.swap( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 integer
---@param unknown3 uuid
---@param unknown4 integer
---@param unknown5 number
function sm.container.spendFromSlot( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
---@param unknown3 integer
---@param unknown4 number
function sm.container.spend( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 integer
---@param unknown3 uuid
---@param unknown4 integer
---@param unknown5 number
function sm.container.collectToSlot( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
---@param unknown3 integer
---@param unknown4 number
function sm.container.collect( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
---@param unknown3 integer
function sm.container.canCollect( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 uuid
---@param unknown3 integer
function sm.container.canSpend( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 container
function sm.container.moveAll( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown container
---@param unknown2 table
function sm.container.setFilters( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.quest.addQuest( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.quest.getQuest( unknown )
    return
end

---Unknown Function?
---@param unknown integer
function sm.quest.getQuestById( unknown )
    return
end

---Unknown Function?
function sm.quest.getActiveQuests()
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest.removeQuest( unknown )
    return
end

---Unknown Function?
---@param unknown quest
function sm.quest.completeQuest( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.quest.getIsRepeatable( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
function sm.quest.getHasCompleted( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getId( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getType( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getName( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getMaterial( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getMaterialId( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.destroy( unknown )
    return
end

---Unknown Function?
---@param unknown uuid
---@param unknown2 vec3
---@param unknown3 quat
---@param unknown4 vec3
function sm.harvestable.create( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getPosition( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getRotation( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 integer
function sm.harvestable.getPoseWeight( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 integer
---@param unknown3 number | string
function sm.harvestable.setPoseWeight( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getColor( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 color
function sm.harvestable.setColor( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getUvFrameIndex( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 integer
function sm.harvestable.setUvFrameIndex( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table | string | number
function sm.harvestable.setParams( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getPublicData( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table
function sm.harvestable.setPublicData( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown harvestable
function sm.harvestable.getClientPublicData( unknown )
    return
end

---Unknown Function?
---@param unknown harvestable
---@param unknown2 table
function sm.harvestable.setClientPublicData( unknown, unknown2 )
    return
end

---(Server Function) Creates a new character in a world.
---@param player player The player controlling the character.
---@param world world The world the character is created in.
---@param position vec3 The world position of the character.
---@param character number | string The old character to inherit from (Optional).
---@param unknown number | string
---@param unknown2 character
---@return character value The created character.
function sm.character.createCharacter( player, world, position, character, unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown table
function sm.character.preloadRenderables( unknown )
    return
end

---Returns a table of all [`players`](#userdata.player "userdata.player") that are currently in the game.
---@return player value The table of players in the game.
function sm.player.getAllPlayers()
    return
end

---(Server Function) Place down a lift game object
---@param player player The player to own the lift.
---@param unknown table
---@param position vec3 The lift position.
---@param level integer The lift level.
---@param rotation integer The rotation of the creation on the lift.
function sm.player.placeLift( player, unknown, position, level, rotation )
    return
end

---(Server Function) Remove the player's lift, if the lift exists.
---@param player player The player that owns the lift.
function sm.player.removeLift( player )
    return
end

---Unknown Function?
---@param unknown uuid
---@param unknown2 vec3
---@param unknown3 number | string
---@param unknown4 table | string | number
function sm.unit.createUnit( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
function sm.unit.getAllUnits()
    return
end

---Creates a new box area trigger at a given position with a given size.
---If a filter is specified, the trigger area will only be able to detects objects of that certain type. See [`sm.areaTrigger.filter`](#sm.areatrigger.filter "sm.areatrigger.filter") for more information about filters.
---@param dimension vec3 The dimensions of the box.
---@param position vec3 The world position.
---@param rotation quat The world rotation.
---@param filter integer The object types the area trigger may detect. (See sm.areaTrigger.filter)
---@param unknown table | string | number
---@return areaTrigger value The created area trigger.
function sm.areaTrigger.createBox( dimension, position, rotation, filter, unknown )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
---@param unknown3 quat
---@param unknown4 integer
function sm.areaTrigger.createBoxWater( unknown, unknown2, unknown3, unknown4 )
    return
end

---Creates an area trigger box with a given size that stays attached to an [`interactable`](#sm.interactable "sm.interactable")
---If a filter is specified, the trigger area will only be able to detects objects of that certain type. See [`sm.areaTrigger.filter`](#sm.areatrigger.filter "sm.areatrigger.filter") for more information about filters.
---@param interactable interactable The host interactable
---@param dimension vec3 The size of the box
---@param position vec3 The position offset
---@param rotation quat The rotation offset
---@param filter integer The object types the area trigger may detect. (See sm.areaTrigger.filter)
---@param unknown table | string | number
---@return areaTrigger value The created area trigger.
function sm.areaTrigger.createAttachedBox( interactable, dimension, position, rotation, filter, unknown )
    return
end

---Destroys an area trigger.
---@param areaTrigger areaTrigger The area trigger to be destroyed.
function sm.areaTrigger.destroy( areaTrigger )
    return
end

---Unknown Function?
---@param unknown vec3
function sm.portal.createPortal( unknown )
    return
end

---Unknown Function?
---@param unknown portal
function sm.portal.destroy( unknown )
    return
end

---Unknown Function?
---@param unknown world
---@param unknown2 string
---@param unknown3 portal
function sm.portal.addWorldPortalHook( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown string
function sm.portal.popWorldPortalHook( unknown )
    return
end

---Creates a new vector.
---@param x number | string The X value.
---@param y number | string The Y value.
---@param z number | string The Z value.
---@return vec3 value The created vector.
function sm.vec3.new( x, y, z )
    return
end

---Creates a new vector with 0 in x, y, x.
---@return vec3 value The zero vector.
function sm.vec3.zero()
    return
end

---Creates a new vector with 1 in x, y, x.
---@return vec3 value The one vector.
function sm.vec3.one()
    return
end

---Returns the X value of a vector.
---@param vector vec3 The vector.
---@return number value The X value.
function sm.vec3.getX( vector )
    return
end

---Sets the X value of a vector.
---@param vector vec3 The vector.
---@param x number | string The X value.
function sm.vec3.setX( vector, x )
    return
end

---Returns the Y value of a vector.
---@param vector vec3 The vector.
---@return number value The Y value.
function sm.vec3.getY( vector )
    return
end

---Sets the Y value of a vector.
---@param vector vec3 The vector.
---@param y number | string The Y value.
function sm.vec3.setY( vector, y )
    return
end

---Returns the Z value of a vector.
---@param vector vec3 The vector.
---@return number value The Z value.
function sm.vec3.getZ( vector )
    return
end

---Sets the Z value of a vector.
---@param vector vec3 The vector.
---@param z number | string The Z value.
function sm.vec3.setZ( vector, z )
    return
end

---Normalizes a vector, ie. converts to a unit vector of length 1.
---@param vector vec3 The vector.
---@return vec3 value The normalized vector.
function sm.vec3.normalize( vector )
    return
end

---Returns the [dot product](https://en.wikipedia.org/wiki/Dot_product) of a vector.
---@param vector1 vec3 The first vector.
---@param vector2 vec3 The second vector.
---@return number value The dot product.
function sm.vec3.dot( vector1, vector2 )
    return
end

---Returns the [cross product](https://en.wikipedia.org/wiki/Cross_product) of two vectors.
---@param vector1 vec3 The first vector.
---@param vector2 vec3 The second vector.
---@return vec3 value The cross product.
function sm.vec3.cross( vector1, vector2 )
    return
end

---Returns the distance of the vector.
---If you want the squared length, using [`length2`](#sm.vec3.length2 "sm.vec3.length2") is faster than squaring the result of this function.
---@param vector vec3 The vector.
---@return number value The length of the vector.
function sm.vec3.length( vector )
    return
end

---Returns the squared distance of the vector.
---@param vector vec3 The vector.
---@return number value The squared length of the vector.
function sm.vec3.length2( vector )
    return
end

---Performs a [linear interpolation](https://en.wikipedia.org/wiki/Linear_interpolation) between two vectors.
---@param vector1 vec3 The first vector.
---@param vector2 vec3 The second vector.
---@param t number | string Interpolation amount between the two inputs.
---@return vec3 value out
function sm.vec3.lerp( vector1, vector2, t )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
---@param unknown3 vec3
---@param unknown4 number | string
function sm.vec3.bezier2( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 vec3
---@param unknown3 vec3
---@param unknown4 vec3
---@param unknown5 number | string
function sm.vec3.bezier3( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Rotate a vector around the X axis.
---@param vector vec3 The vector.
---@param angle number | string The angle.
---@return vec3 value The rotated vector.
function sm.vec3.rotateX( vector, angle )
    return
end

---Rotate a vector around the Y axis.
---@param vector vec3 The vector.
---@param angle number | string The angle.
---@return vec3 value The rotated vector.
function sm.vec3.rotateY( vector, angle )
    return
end

---Rotate a vector around the Z axis.
---@param vector vec3 The vector.
---@param angle number | string The angle.
---@return vec3 value The rotated vector.
function sm.vec3.rotateZ( vector, angle )
    return
end

---Rotate a vector around an axis.
---@param vector vec3 The vector.
---@param angle number | string The angle.
---@param normal vec3 The axis to be rotated around.
---@return vec3 value The rotated vector.
function sm.vec3.rotate( vector, angle, normal )
    return
end

---Returns a [`quaternion`](#userdata.quat "userdata.quat") representing the rotation from one vector to another.
---The quaternion can then be multiplied with any vector to rotate it in the same fashion.
---v1 \= sm.vec3.new(1,0,0)
---v2 \= sm.vec3.new(0,1,0)
---trans \= sm.vec3.getRotation(v1, v2)
---\-- \`trans\` now rotates a vector 90 degrees
---print(trans \* v2)
---\-- {<Vec3>, x = -1, y = 0, z = 0}
---@param vector1 vec3 The first vector.
---@param vector2 vec3 The second vector.
---@return quat value The transformation.
function sm.vec3.getRotation( vector1, vector2 )
    return
end

---Finds the closest axis-aligned vector from the given vector
---@param vector vec3 The vector.
---@return vec3 value The axis-aligned vector.
function sm.vec3.closestAxis( vector )
    return
end

---Creates a new quaternion.
---@param x number | string The X value.
---@param y number | string The Y value.
---@param z number | string The Z value.
---@param w number | string The W value.
---@return quat value The created quaternion.
function sm.quat.new( x, y, z, w )
    return
end

---Creates a new identity quaternion.
---@return quat value The created quaternion.
function sm.quat.identity()
    return
end

---Unknown Function?
---@param unknown number | string
---@param unknown2 vec3
function sm.quat.angleAxis( unknown, unknown2 )
    return
end

---Returns the X value of a quaternion.
---@param quaternion quat The quaternion.
---@return number value The X value.
function sm.quat.getX( quaternion )
    return
end

---Sets the X value of a quaternion.
---@param quaternion quat The quaternion.
---@param x number | string The X value.
function sm.quat.setX( quaternion, x )
    return
end

---Returns the Y value of a quaternion.
---@param quaternion quat The quaternion.
---@return number value The Y value.
function sm.quat.getY( quaternion )
    return
end

---Sets the Y value of a quaternion.
---@param quaternion quat The quaternion.
---@param y number | string The Y value.
function sm.quat.setY( quaternion, y )
    return
end

---Returns the Z value of a quaternion.
---@param quaternion quat The quaternion.
---@return number value The Z value.
function sm.quat.getZ( quaternion )
    return
end

---Sets the Z value of a quaternion.
---@param quaternion quat The quaternion.
---@param z number | string The Z value.
function sm.quat.setZ( quaternion, z )
    return
end

---Returns the W value of a quaternion.
---@param quaternion quat The quaternion.
---@return number value The W value.
function sm.quat.getW( quaternion )
    return
end

---Sets the W value of a quaternion.
---@param quaternion quat The quaternion.
---@param w number | string The W value.
function sm.quat.setW( quaternion, w )
    return
end

---Rounds the quaternion rotation into 90 degree steps
---@param quaternion quat The quaternion.
---@return quat value quaternion	The rounded quaternion.
function sm.quat.round90( quaternion )
    return
end

---Create a new quaternion from direction vectors
---@param at vec3 The forward vector.
---@param up vec3 The up vector.
---@return quat value quaternion	The quaternion.
function sm.quat.lookRotation( at, up )
    return
end

---Performs a spherical linear interpolation between two quaternion.
---@param quaternion1 quat The first quaternion.
---@param quaternion2 quat The second quaternion.
---@param t number | string Interpolation amount between the two inputs.
---@return quat value out
function sm.quat.slerp( quaternion1, quaternion2, t )
    return
end

---Generates a uuid.
---@param uuid string The string to generate an uuid instance from. If none is provided, generate a random uuid.
---@return uuid value The created uuid.
function sm.uuid.new( uuid )
    return
end

---Creates a nil uuid {00000000-0000-0000-0000-000000000000}
---@return uuid value The nil uuid.
function sm.uuid.getNil()
    return
end

---Creates a new color object from a hex value `0xRRBBGGAA`.
---@param hexInt integer | string | number The hex value.
---@param unknown number | string
---@param unknown2 number | string
---@param unknown3 number | string
---@return color value The created color.
function sm.color.new( hexInt, unknown, unknown2, unknown3 )
    return
end

---Returns the red value of a color.
---@param color color The color object.
---@return number value The red value.
function sm.color.getR( color )
    return
end

---Returns the green value of a color.
---@param color color The color object.
---@return number value The green value.
function sm.color.getG( color )
    return
end

---Returns the blue value of a color.
---@param color color The color object.
---@return number value The blue value.
function sm.color.getB( color )
    return
end

---Returns the alpha value of a color.
---@param color color The color object.
---@return number value The alpha value.
function sm.color.getA( color )
    return
end

---Sets the red value of a color.
---@param color color The color object.
---@param r number | string The red value.
function sm.color.setR( color, r )
    return
end

---Sets the green value of a color.
---@param color color The color object.
---@param g number | string The green value.
function sm.color.setG( color, g )
    return
end

---Sets the blue value of a color.
---@param color color The color object.
---@param b number | string The blue value.
function sm.color.setB( color, b )
    return
end

---Sets the alpha value of a color.
---@param color color The color object.
---@param a number | string The alpha value.
function sm.color.setA( color, a )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
function sm.pathNode.createPathNode( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 vec3
---@param unknown3 number
---@param unknown4 table
function sm.pathfinder.getPath( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number | string
---@param unknown3 number | string
function sm.pathfinder.getSortedNodes( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
function sm.gui.createWidget()
    return
end

---Unknown Function?
function sm.gui.getScreenSize()
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 number
function sm.gui.createGuiFromLayout( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createWorkbenchGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createCookBotGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createCraftBotGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createMechanicStationGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createSurvivalHudGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createHideoutGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createDressBotGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createEngineGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createSeatGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createNameTagGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createBagIconGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createBeaconIconGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createWaypointIconGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createAmmunitionContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createBatteryContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createChemicalContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createFertilizerContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createGasContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createSeedContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createWaterContainerGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createSeatUpgradeGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createSteeringBearingGui( unknown )
    return
end

---Unknown Function?
---@param unknown number | string
---@param unknown2 number | string
function sm.gui.startFadeToBlack( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown number | string
function sm.gui.endFadeToBlack( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createChallengeHUDGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createChallengeMessageGui( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createLogbookGui( unknown )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 number | string
function sm.gui.displayAlertText( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.hideGui( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.gui.getKeyBinding( unknown )
    return
end

---Unknown Function?
function sm.gui.setInteractionText()
    return
end

---Unknown Function?
---@param unknown string
function sm.gui.setCenterIcon( unknown )
    return
end

---Unknown Function?
---@param unknown number | string
function sm.gui.setProgressFraction( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.gui.createCharacterCustomizationGui( unknown )
    return
end

---Unknown Function?
---@param unknown character
---@param unknown2 string
---@param unknown3 number
function sm.gui.setCharacterDebugText( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
function sm.gui.exitToMenu()
    return
end

---Unknown Function?
---@param unknown string
function sm.gui.chatMessage( unknown )
    return
end

---Unknown Function?
function sm.gui.widget.getId()
    return
end

---Unknown Function?
function sm.gui.widget.getName()
    return
end

---Unknown Function?
function sm.gui.widget.getTypeName()
    return
end

---Unknown Function?
function sm.gui.widget.getPosition()
    return
end

---Unknown Function?
function sm.gui.widget.setPosition()
    return
end

---Unknown Function?
function sm.gui.widget.getVisible()
    return
end

---Unknown Function?
function sm.gui.widget.setVisible()
    return
end

---Unknown Function?
function sm.gui.widget.getSize()
    return
end

---Unknown Function?
function sm.gui.widget.setSize()
    return
end

---Unknown Function?
function sm.gui.widget.getText()
    return
end

---Unknown Function?
function sm.gui.widget.setText()
    return
end

---Unknown Function?
function sm.gui.widget.destroy()
    return
end

---Unknown Function?
function sm.gui.widget.find()
    return
end

---Unknown Function?
function sm.gui.widget.bindOnClick()
    return
end

---(Client Function) Create a particle effect at a given position and rotation.
---Note
---If you start a looping particle effect through this method then the only way to get rid of it is by reloading the save.
---@param particle string The particle name.
---@param position vec3 The position.
---@param rotation quat The rotation. (Defaults to no rotation)
---@param color color The blend color. (Defaults to white)
function sm.particle.createParticle( particle, position, rotation, color )
    return
end

---Plays an effect. If this function is called on the server it will play the effect on all clients.
---Note
---If you start a looping effect using this function you will not be able to stop it.  
---Please use [`createEffect`](#sm.effect.createeffect "sm.effect.createeffect") for looping effects
---@param name string The name.
---@param position vec3 The position.
---@param velocity vec3 The velocity. (Defaults to no velocity)
---@param rotation quat The rotation. (Defaults to no rotation)
---@param unknown vec3
---@param unknown2 table
function sm.effect.playEffect( name, position, velocity, rotation, unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 unknown
---@param unknown3 string
---@param unknown4 table
function sm.effect.playHostedEffect( unknown, unknown2, unknown3, unknown4 )
    return
end

---(Client Function) Creates an effect.
---If you provide a host interactable to the effect then it will fetch position, velocity and orientation data from the interactable instead of relying on this information being fed to it.
---This results in far more accurate positioning of effects that are supposed to stay attached to an object.
---@param name string The name.
---@param interactable character | interactable The interactable the effect is attached to. (Optional)
---@param name_optional string The bone name. (Optional)
---@return effect value The created effect.
function sm.effect.createEffect( name, interactable, name_optional )
    return
end

---Unknown Function?
---@param unknown string
function sm.effect.createEffect2D( unknown )
    return
end

---(Client Function) Plays a sound.
---If position is specified, the sound will play at the given coordinates in the world. Otherwise, the sound will play normally.
---For a list of available sounds to play, see [`sm.audio.soundList`](#sm.audio.soundlist "sm.audio.soundlist").
---@param sound string The sound to play.
---@param position vec3 The world position of the sound. (Optional)
function sm.audio.play( sound, position )
    return
end

---(Client Function) Returns the player object of the local player.
---@return player value The player object.
function sm.localPlayer.getPlayer()
    return
end

---(Client Function) Returns the unique player id of the local player.
---@return integer value The player's id.
function sm.localPlayer.getId()
    return
end

---(Client Function) Returns the world postition of the local player.
---@return vec3 value The player's world position.
function sm.localPlayer.getPosition()
    return
end

---(Client Function) Returns the direction the local player is aiming.
---@return vec3 value The direction of the player's aim.
function sm.localPlayer.getDirection()
    return
end

---(Client Function) Returns the right-vector perpendicular to the local player's aim.
---@return vec3 value The right-vector of the player's aim.
function sm.localPlayer.getRight()
    return
end

---(Client Function) Returns the up-vector perpendicular to the local player's aim.
---@return vec3 value The up-vector of the player's aim.
function sm.localPlayer.getUp()
    return
end

---(Client Function) Returns the start position of the local player's raycast. The position depends on the [`camera`](#sm.camera "sm.camera")'s position, and whether it's in first- of third-person.
---@return vec3 value The start position of the raycast.
function sm.localPlayer.getRaycastStart()
    return
end

---(Client Function) Performs a [raycast](https://en.wikipedia.org/wiki/Ray_casting) relative to the local player's perspective.
---@param range number | string The maximum range.
---@param origin vec3 The start position. (Defaults to getRaycastStart)
---@param direction vec3 The direction. (Defaults to getDirection)
---@return boolean|raycastResult value 2 values: whether raycast was successful; the raycast result data.
function sm.localPlayer.getRaycast( range, origin, direction )
    return
end

---Unknown Function?
function sm.localPlayer.isInFirstPersonView()
    return
end

---Unknown Function?
---@param unknown string
function sm.localPlayer.getFpBonePos( unknown )
    return
end

---Unknown Function?
function sm.localPlayer.getActiveItem()
    return
end

---Unknown Function?
function sm.localPlayer.getSelectedHotbarSlot()
    return
end

---Unknown Function?
function sm.localPlayer.getCarryColor()
    return
end

---Unknown Function?
function sm.localPlayer.getCarry()
    return
end

---Unknown Function?
function sm.localPlayer.getInventory()
    return
end

---Unknown Function?
function sm.localPlayer.getHotbar()
    return
end

---Unknown Function?
---@param unknown vec3
function sm.localPlayer.setDirection( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.localPlayer.getFpAnimationInfo( unknown )
    return
end

---Unknown Function?
---@param unknown string
---@param unknown2 number | string
---@param unknown3 number | string
---@param unknown4 number
function sm.localPlayer.updateFpAnimation( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown string
function sm.localPlayer.addRenderable( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.localPlayer.removeRenderable( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.localPlayer.setBlockSprinting( unknown )
    return
end

---Unknown Function?
---@param unknown number
function sm.localPlayer.setLockedControls( unknown )
    return
end

---Unknown Function?
---@param unknown vec3
function sm.camera.setPosition( unknown )
    return
end

---(Client Function) Returns the world postition of the camera.
---@return vec3 value The camera's world position.
function sm.camera.getPosition()
    return
end

---Unknown Function?
function sm.camera.getDefaultPosition()
    return
end

---Unknown Function?
---@param unknown vec3
function sm.camera.setDirection( unknown )
    return
end

---(Client Function) Returns the direction the camera is aiming.
---@return vec3 value The direction of the camera's aim.
function sm.camera.getDirection()
    return
end

---(Client Function) Returns the up-vector perpendicular to the camera's aim.
---@return vec3 value The up-vector of the camera's aim.
function sm.camera.getUp()
    return
end

---(Client Function) Returns the right-vector perpendicular to the camera's aim.
---@return vec3 value The right-vector of the camera's aim.
function sm.camera.getRight()
    return
end

---(Client Function) Returns the camera's field of view angle.
---@return vec3 value The field of view.
function sm.camera.getFov()
    return
end

---(Client Function) Sets the camera's level of camera shake.
---@param strength number | string The camera shake strength.
function sm.camera.setShake( strength )
    return
end

---Unknown Function?
---@param unknown integer
function sm.camera.setCameraState( unknown )
    return
end

---Unknown Function?
function sm.camera.getCameraState()
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
function sm.camera.setCameraPullback( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown number | string
---@param unknown2 vec3
---@param unknown3 vec3
function sm.camera.cameraSphereCast( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown number | string
function sm.render.setOutdoorLighting( unknown )
    return
end

---Unknown Function?
function sm.render.getOutdoorLighting()
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 integer
---@param unknown3 integer
function sm.render.getScreenCoordinatesFromWorldPosition( unknown, unknown2, unknown3 )
    return
end

---Used to check collisions between the lift and the world.
---@param unknown table
---@param position vec3 The lift position.
---@param rotation integer The rotation of the creation on the lift.
function sm.tool.checkLiftCollision( unknown, position, rotation )
    return
end

---(Client Function) Pre-loads renderable data to be used by the tool. This eliminates excessive loading during run time.
---@param unknown table
function sm.tool.preloadRenderables( unknown )
    return
end

---(Client Function) Force a player to use a tool.
---@param tool tool
function sm.tool.forceTool( tool )
    return
end

---Unknown Function?
---@param uuid uuid
function sm.tool.uuidExists( uuid )
    return
end

---(Client Function) Sets an array of bodies to visualize.
---@param unknown table
function sm.visualization.setCreationBodies( unknown )
    return
end

---(Client Function) Controls the visibility of the creation visualization
---@param visible boolean Wheter the creation visualization is visible
function sm.visualization.setCreationVisible( visible )
    return
end

---(Client Function) Controls the rendering of the creation visualization. 
---@param valid boolean Wheter the visualization should render as valid
function sm.visualization.setCreationValid( valid )
    return
end

---(Client Function) Controls the transform of the visualization. If true the visualization will render using setFreePlacementPosition/setFreePlacementRotation functions.
---If false the visualization will render ontop of the creation.
---@param valid boolean Wheter the visualization should use free placement
function sm.visualization.setCreationFreePlacement( valid )
    return
end

---(Client Function) Set the world position of the visualization. Only works if setFreePlacement is true.
---@param position vec3 World position of the visualization
function sm.visualization.setCreationFreePlacementPosition( position )
    return
end

---(Client Function) Set the rotation index of the visualization. Only works if setFreePlacement is true.
---@param index integer Index to rotate the visualization with
function sm.visualization.setCreationFreePlacementRotation( index )
    return
end

---(Client Function) Set the world position of the lift visualization.
---@param position vec3 World position of the lift visualization
function sm.visualization.setLiftPosition( position )
    return
end

---(Client Function) Set the lift level of the lift visualization.
---@param level integer The level of the lift
function sm.visualization.setLiftLevel( level )
    return
end

---(Client Function) Controls the visibility of the lift visualization
---@param visible boolean Whether the lift visualization is visible
function sm.visualization.setLiftVisible( visible )
    return
end

---(Client Function) Controls the rendering of the lift visualization. 
---@param valid boolean Whether the visualization should render as valid
function sm.visualization.setLiftValid( valid )
    return
end

---Unknown Function?
---@param unknown vec3
---@param unknown2 number
---@param unknown3 joint | shape
function sm.visualization.setBlockVisualization( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown string
function sm.visualization.createBlueprint( unknown )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
---@param unknown5 integer
---@param unknown6 integer
function sm.terrainTile.getHeightAt( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
---@param unknown5 integer
---@param unknown6 integer
function sm.terrainTile.getColorAt( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
---@param unknown5 integer
---@param unknown6 integer
function sm.terrainTile.getMaterialAt( unknown, unknown2, unknown3, unknown4, unknown5, unknown6 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
---@param unknown5 integer
function sm.terrainTile.getClutterIdxAt( unknown, unknown2, unknown3, unknown4, unknown5 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
function sm.terrainTile.getAssetsForCell( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
---@param unknown4 integer
function sm.terrainTile.getHarvestablesForCell( unknown, unknown2, unknown3, unknown4 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
function sm.terrainTile.getCreationsForCell( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
function sm.terrainTile.getNodesForCell( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
function sm.terrainTile.getPrefabsForCell( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown integer
---@param unknown2 integer
---@param unknown3 integer
function sm.terrainTile.getDecalsForCell( unknown, unknown2, unknown3 )
    return
end

---Unknown Function?
---@param unknown string
function sm.terrainTile.getSize( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.terrainTile.getTileUuid( unknown )
    return
end

---Unknown Function?
---@param unknown string
function sm.terrainTile.getCreatorId( unknown )
    return
end

---Unknown Function?
function sm.terrainTile.getContentFromPrefab()
    return
end

---Unknown Function?
---@param unknown table | string | number
---@param unknown2 table | string | number
function sm.terrainGeneration.saveGameStorage( unknown, unknown2 )
    return
end

---Unknown Function?
---@param unknown table | string | number
function sm.terrainGeneration.loadGameStorage( unknown )
    return
end

---Get world ID
---@return integer
function sm.world:getId()
    return
end

---Delete a world
function sm.world:destroy()
    return
end

---Get the current main world?? - Unknown Function?
---@return world value
function sm.world.getCurrentWorld()
    return    
end

---(Server Method) Create a world.
---@param script string
---@param name string
---@param params table
---@param seed number
---@return world value
function sm.world.createWorld( script, name, params, seed)
    return
end

---(Server Method) Delete a world.
---@param world world
function sm.world.destroyWorld( world )
    return
end

---(Server Method) Load a world.
---@param world world
function sm.world.loadWorld( world )
    return
end

---Get a world id.
---@param world world
---@return integer|string value -- assumed.
function sm.world.getId( world )
    return 
end

--All tool interact states.
sm.tool.interactState = {
    null = 0,
    start = 1,
    hold = 2,
    stop = 3
}

---Number for action.
sm.interactable.actions = {
    none = 0,
    left = 1,
    right = 2,
    forward = 3,
    backward = 4,
    item0 = 5,
    item1 = 6,
    item2 = 7,
    item3 = 8,
    item4 = 9,
    item5 = 10,
    item6 = 11,
    item7 = 12,
    item8 = 13,
    item9 = 14,
    use = 15,
    jump = 16,
    exit = 17,
    attack = 18,
    create = 19,
    zoomIn = 20,
    zoomOut = 21
}

---Add together for mutiple connection types
sm.interactable.connectionType = {
    none = 0,
    logic = 1,
    power = 2,
    bearing = 4,
    seated = 8,
    piston = 16,
    gasoline = 256,
    electricity = 512,
    water = 1024,
    ammo = 2048,
    all = 4.29497e+09
}

---All steering constants.
sm.interactable.steering = {
    left = 1,
    right = 2,
    forward = 4,
    backward = 8
}

---All interactable types.
sm.interactable.types = {
    "electricEngine",
    "gasEngine",
    "steering",
    "seat",
    "controller",
    "button",
    "lever",
    "sensor",
    "thruster",
    "radio",
    "horn",
    "tone",
    "logic",
    "timer",
    "particlePreview",
    "spring",
    "pointLight",
    "spotLight",
    "chest",
    "itemStack",
    "scripted",
    "piston",
    "simpleInteractive",
    "camera",
    "waypoint",
    "survivalThruster",
    "survivalPiston",
    "survivalSpring",
    "survivalSequence",
    "survivalSensor"
}

---Joint Types
sm.joint.types = {
    "bearing",
    "piston"
}

---Area Trigger Filters add together for multiple.
sm.areaTrigger.filter = {
    dynamicBody = 1,
    staticBody = 2,
    character = 4,
    areaTrigger = 8,
    harvestable = 512,
    all = 527
}

---Pyshics Types
sm.physics.types = {
    "invalid",
    "terrainSurface",
    "terrainAsset",
    "body",
    "joint",
    "lift",
    "character",
    "joint",
    "harvestable",
    "ragdoll",
    "areaTrigger",
    "vision"
}

--All filters
sm.physics.filter = {
    all = -1, 
    dynamicBody = 1,
    staticBody = 2,
    character = 4,
    areaTrigger = 8,
    static = 1922, 
    joints = 4096, 
    default  = 6023
}

---Camera states.
sm.camera.state = {
    default  = 1, 
    cutsceneFP = 2,
    cutsceneTP = 3,
    forcedTP = 4
}

--All condition propertys.
sm.pathfinder.conditionProperty = {
    height = 0,
    target = 1,
    none = 2
}

--All contruction constants.
sm.construction.constants = {
    subdivideRatio = 0.25,
    subdivideRatio_2 = 0.125,
    subdivisions = 4,
    shapeSpacing = 0.004
}

--All possible default sounds
sm.audio.soundList = {
    "Ambient - Birds",
    "Ambient - Challenge",
    "Ambient - Field",
    "Blueprint - Build",
    "Blueprint - Camera",
    "Blueprint - Close",
    "Blueprint - Delete",
    "Blueprint - Open",
    "Blueprint - Save",
    "Blueprint - Select",
    "Blueprint - Share",
    "Brake",
    "Button off",
    "Button on",
    "Challenge - Fall",
    "Challenge - Start",
    "Challenge - Supervisor generic",
    "Character crouch",
    "Character get up",
    "Character hit",
    "Character jump",
    "Character land",
    "Character movement",
    "Character movement crouched",
    "Character wind",
    "Collision - Debris",
    "Collision - Multiple",
    "Collision - Rolling",
    "Collision - Single",
    "Collision - Sliding",
    "Collision - Vehicle",
    "ConnectTool",
    "ConnectTool - Equip",
    "ConnectTool - Idle",
    "ConnectTool - Released",
    "ConnectTool - Rotate",
    "ConnectTool - Selected",
    "ConnectTool - Unequip",
    "Construction - Block attached to joint",
    "Construction - Block placed",
    "Construction - Resize",
    "Dancebass",
    "Dancedrum",
    "Dancepad",
    "Dancevoice",
    "Destruction - Block destroyed",
    "Destruction - Resize",
    "ElectricEngine",
    "GUI Backpack closed",
    "GUI Backpack opened",
    "GUI Inventory highlight",
    "GUI Item drag",
    "GUI Item released",
    "GUI Quickbar highlight",
    "GUI Shape rotate",
    "Gas Explosion",
    "Gas Leak",
    "GasEngine",
    "Handbook - Close",
    "Handbook - Equip",
    "Handbook - Highlight",
    "Handbook - Open",
    "Handbook - Turn page",
    "Handbook - Unequip",
    "Horn",
    "Lever off",
    "Lever on",
    "Lift - Pickup object",
    "Lift placed",
    "Lift usage",
    "Music",
    "PaintTool - Close",
    "PaintTool - ColorPick",
    "PaintTool - Equip",
    "PaintTool - Erase",
    "PaintTool - Open",
    "PaintTool - Paint",
    "PaintTool - Reload",
    "PaintTool - Unequip",
    "Phaser",
    "Piston",
    "PotatoRifle - Equip",
    "PotatoRifle - NoAmmo",
    "PotatoRifle - Reload",
    "PotatoRifle - Shoot",
    "PotatoRifle - Unequip",
    "Radio",
    "RaftShark",
    "Retrobass",
    "Retrodrum",
    "Retrofmblip",
    "Retrovoice",
    "Retrowildblip",
    "Reverb - Challenge",
    "Reverb - Field",
    "Seat seated",
    "Seat unseated",
    "Sensor off",
    "Sensor on",
    "SequenceController",
    "SequenceController change rotation",
    "Sledgehammer - Equip",
    "Sledgehammer - Swing",
    "Sledgehammer - Unequip",
    "Suspension",
    "Thruster",
    "Thruster dust",
    "Toilet seated",
    "Toilet unseated",
    "Weapon - Hit",
    "WeldTool - Case 1",
    "WeldTool - Case 2",
    "WeldTool - Equip",
    "WeldTool - Error",
    "WeldTool - Sparks",
    "WeldTool - Unequip",
    "WeldTool - Weld"
}

---Reutrns current world
---@return world value
function CurrentWorld()
   return  
end